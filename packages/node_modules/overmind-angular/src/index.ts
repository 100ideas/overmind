import { EventType, Overmind, TApp, Configuration } from 'overmind'

// @ts-ignore
import { NgZone } from '@angular/core'

export type TConnect<Config extends Configuration> = {
  overmind: {
    state: TApp<Config>['state']
    actions: TApp<Config>['actions']
    reaction: (
      name: string,
      stateCb: (state: TApp<Config>['state']) => any,
      Function
    ) => void
  }
}

let nextComponentId = 0

export const createConnect = <A extends Overmind<any>>(overmind: A) => () => {
  const componentId = nextComponentId++
  let componentInstanceId = 0

  return function(target: any) {
    const targetNgOnInit = target.prototype.ngOnInit
    const targetNgDoCheck = target.prototype.ngDoCheck
    const targetNgAfterContentInit = target.prototype.ngAfterContentInit
    const targetNgAfterViewInit = target.prototype.ngAfterViewInit
    const targetNgAfterViewChecked = target.prototype.ngAfterViewChecked
    const reactionFactory = overmind.createReactionFactory(
      target.constructor.name
    )

    target.prototype.ngOnInit = function() {
      this.overmind = {
        state: overmind.state,
        actions: overmind.actions,
        reaction: reactionFactory.add,
      }
      this.__componentInstanceId = componentInstanceId++
      this.__shouldUpdatePaths = false
      this.__currentTrackId = null
      this.__listener = null

      if (targetNgOnInit) {
        targetNgOnInit.apply(target)
      }

      if (
        !this.cdr &&
        (!target['__annotations__'][0] ||
          target['__annotations__'][0].changeDetection === 0)
      ) {
        throw new Error(
          'overmind-angular ERROR: You have to inject the ChangeDetectionRef as "cdr" on the component. In the constructor, add argument: "private cdr: ChangeDetectorRef" '
        )
      }
    }

    target.prototype.ngAfterContentInit = function() {
      this.__currentTrackId = overmind.trackState()

      if (targetNgAfterContentInit) {
        targetNgAfterContentInit.apply(target)
      }
    }

    target.prototype.ngAfterViewInit = function() {
      const ngZ = new NgZone({ enableLongStackTrace: false })
      const paths = overmind.clearTrackState(this.__currentTrackId)

      overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {
        componentId,
        componentInstanceId: this.__componentInstanceId,
        name: this.constructor.name || '',
        paths: Array.from(paths),
      })
      this.__listener = overmind.addMutationListener(paths, (flushId) => {
        this.__shouldUpdatePaths = true
        if (this.cdr) {
          this.cdr.markForCheck()
        }
        ngZ.run(() => {})

        overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {
          componentId,
          componentInstanceId: this.__componentInstanceId,
          name: this.constructor.name || '',
          paths: Array.from(paths),
          flushId,
        })
      })
      if (targetNgAfterViewInit) {
        targetNgAfterViewInit.apply(target)
      }
    }

    target.prototype.ngDoCheck = function() {
      if (this.__shouldUpdatePaths) {
        this.__currentTrackId = overmind.trackState()
      }
      if (targetNgDoCheck) {
        targetNgDoCheck.apply(target)
      }
    }

    target.prototype.ngAfterViewChecked = function() {
      if (this.__shouldUpdatePaths) {
        const paths = overmind.clearTrackState(this.__currentTrackId)
        this.__listener.update(paths)
        this.__shouldUpdatePaths = false
        overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {
          componentId,
          componentInstanceId: this.__componentInstanceId,
          name: this.constructor.name || '',
          paths: Array.from(paths),
        })
      }
      if (targetNgAfterViewChecked) {
        targetNgAfterViewChecked.apply(target)
      }
    }

    let targetNgOnDestroy = target.prototype.ngOnDestroy

    target.prototype.ngOnDestroy = function() {
      if (targetNgOnDestroy) {
        targetNgOnDestroy.apply(target)
      }
      overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {
        componentId,
        componentInstanceId: this.__componentInstanceId,
        name: this.constructor.name || '',
      })
      this.__listener.dispose()
      this.__reactionFactory.dispose()
    }

    return target
  }
}
