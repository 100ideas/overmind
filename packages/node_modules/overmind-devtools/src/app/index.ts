import App, {
  TAction,
  TApp,
  TContext,
  TDerive,
  TMutate,
  TReaction,
} from 'overmind'
import createConnect, { TConnect } from 'overmind-react'

import * as actions from './actions'
import * as context from './context'
import * as state from './state'

const config = {
  context,
  actions,
  state,
}

const app = new App(config, {
  devtools: false,
})

export type Connect = TConnect<typeof app>

export const connect = createConnect(app)

export default app

// === copy/paste

type IApp = TApp<typeof config>
export type Action<Value = void, ReturnValue = any> = TAction<
  IApp,
  Value,
  ReturnValue
>

export type Mutate<Value = any> = TMutate<IApp, Value>

export type Context<Value> = TContext<IApp, Value>

// Operations
export namespace Operation {
  export type Map<Value, ReturnValue = Value> = (
    ctx: Context<Value>
  ) => ReturnValue
  export type Filter<Value = any> = (ctx: Context<Value>) => boolean
  export type When<Value = any> = (ctx: Context<Value>) => boolean
  export type Run<Value = any> = (ctx: Context<Value>) => void
  export type Fork<Value = any> = (ctx: Context<Value>) => string
  export type Attempt<Value, ReturnValue> = (ctx: Context<Value>) => ReturnValue
}

export type Derive<Value> = TDerive<IApp, Value>

export type Reaction = TReaction<IApp>
