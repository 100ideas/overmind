export type Mutation = {
  args: any[]
  method: string
  path: string
}

export type Effect = {
  args: any[]
  method: string
  name: string
  result: any
}

export enum ActionsListItemType {
  ACTION = 'ACTION',
  GROUP = 'GROUP',
}

export type ActionItem = {
  type: ActionsListItemType.ACTION
  id: string
  actionId: string
}

export type ActionGroupItem = {
  type: ActionsListItemType.GROUP
  id: string
  actionId: string
  isCollapsed: boolean
  actionIds: string[]
}

export type ActionsListItem = ActionItem | ActionGroupItem

export type Operator = {
  name: string
  actionId: number
  executionId: number
  isAsync: boolean
  isRunning: boolean
  isCollapsed: boolean
  operatorId: number
  mutations: Mutation[]
  effects: Effect[]
  path: string[]
  type: string
  result: any
}

export type Action = {
  actionName: string
  actionId: number
  executionId: number
  isRunning: boolean
  operators: Operator[]
  value: any
}

export type Actions = {
  [id: string]: Action
}

export type Flush = {
  flushId: number
  mutations: Mutation[]
  components: string[]
  derived: string[]
  reactions: string[]
}

export type FlushReference = {
  flushId: number
  isCollapsed: boolean
}

export type Flushes = {
  [id: string]: Flush
}

export type Component = {
  id: string
  name: string
  isMounted: boolean
  paths: string[]
  updateCount: number
}

export type Derived = {
  flushId: number
  path: string
  paths: string[]
  updateCount: number
  value: any
}

export type Components = {
  [id: string]: Component
}

export type DerivedMap = {
  [path: string]: Derived
}

export type App = {
  name: string
  messages: AppMessage[]
  state: object
  components: Components
  derived: Derived
  flushes: Flushes
  flushByActionId: {
    [id: string]: FlushReference
  }
  flushByOperatorId: {
    [id: string]: FlushReference
  }
  actions: Actions
  actionsList: ActionsListItem[]
  currentActionId: string
}

export type Apps = {
  [name: string]: App
}

export type AppMessage = {
  type: string
  data: any
}

export type Message = {
  appName: string
  messages: AppMessage[]
}

export enum Tab {
  Actions = 'Actions',
  State = 'State',
  Console = 'Console',
  Components = 'Components',
  Flushes = 'Flushes',
  Remove = 'Remove',
}

export type GroupedComponent = {
  name: string
  components: Component[]
  isCollapsed: boolean
}

export type GroupedComponents = {
  [name: string]: GroupedComponent
}
