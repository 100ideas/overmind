import { derive } from 'overmind'
import * as derived from './derived'

export type Mutation = {
  args: any[]
  method: string
  path: string
}

export type Effect = {
  args: any[]
  method: string
  name: string
  result: any
}

export enum ActionsListItemType {
  ACTION = 'ACTION',
  GROUP = 'GROUP',
}

export type ActionItem = {
  type: ActionsListItemType.ACTION
  id: string
  actionId: string
}

export type ActionGroupItem = {
  type: ActionsListItemType.GROUP
  id: string
  actionId: string
  isCollapsed: boolean
  actionIds: string[]
}

export type ActionsListItem = ActionItem | ActionGroupItem

export type Operator = {
  name: string
  actionId: number
  executionId: number
  isAsync: boolean
  isRunning: boolean
  isCollapsed: boolean
  operatorId: number
  mutations: Mutation[]
  effects: Effect[]
  path: string[]
  type: string
  result: any
}

export type Action = {
  actionName: string
  actionId: number
  executionId: number
  isRunning: boolean
  operators: Operator[]
  value: any
}

export type Actions = {
  [id: string]: Action
}

export type Flush = {
  flushId: number
  mutations: Mutation[]
  components: string[]
  derived: string[]
  computed: string[]
}

export type FlushReference = {
  flushId: number
  isCollapsed: boolean
}

export type Flushes = {
  [id: string]: Flush
}

export type Component = {
  id: string
  name: string
  isMounted: boolean
  paths: string[]
  updateCount: number
}

export type Derived = {
  flushId: number
  path: string
  paths: string[]
  updateCount: number
  value: any
}

export type Computed = {
  cacheKeyIndex: number
  cacheKeysCount: number
  flushId: number
  limit: number
  path: string
  paths: string[]
  updateCount: number
  value: number
}

export type Components = {
  [id: string]: Component
}

export type DerivedMap = {
  [path: string]: Derived
}

export type ComputedMap = {
  [path: string]: Computed
}

export type App = {
  name: string
  port: string
  messages: AppMessage[]
  state: object
  components: Components
  derived: Derived
  computed: Computed
  flushes: Flushes
  flushByActionId: {
    [id: string]: FlushReference
  }
  flushByOperatorId: {
    [id: string]: FlushReference
  }
  actions: Actions
  actionsList: ActionsListItem[]
  currentActionId: string
}

export type Apps = {
  [port: string]: App
}

export type AppMessage = {
  type: string
  data: any
}

export type Message = {
  port: string
  message: AppMessage[]
}

export enum Tab {
  Actions = 'Actions',
  State = 'State',
  Console = 'Console',
  Components = 'Components',
  Flushes = 'Flushes',
  Remove = 'Remove',
}

export let isConnecting: boolean = true

export let isLoading: boolean = true

export let isAddingPort: boolean = false

export let error: string = null

export let currentPort: string = null

export let apps: Apps = {}

export let newPortValue: string = ''

export let currentTab: Tab = Tab.State

export let expandedStatePaths: string[] = ['']

export const currentApp: App = derive(derived.currentApp)

export const componentsMounted: Component[] = derive(derived.componentsMounted)

export const componentsUpdateCount: number = derive(
  derived.componentsUpdateCount
)

export const componentsStatePathCount: number = derive(
  derived.componentsStatePathCount
)

export const flushes: Flush[] = derive(derived.flushes)

export const flushesMutationsCount: number = derive(
  derived.flushesMutationsCount
)

export const flushesStatePathCount: number = derive(
  derived.flushesStatePathCount
)

export const currentAction: Action = derive(derived.currentAction)
