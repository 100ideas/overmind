import { Component } from './state'
import { Derive } from '../app'

export const currentApp: Derive = (state) => state.apps[state.currentPort]

export const componentsMounted: Derive = (state) =>
  Object.keys(state.currentApp.components).reduce(
    (aggr, key) => {
      if (state.currentApp.components[key].isMounted) {
        return aggr.concat(state.currentApp.components[key])
      }

      return aggr
    },
    [] as Component[]
  )

export const componentsUpdateCount: Derive = (state) =>
  state.componentsMounted.reduce(
    (aggr, component) => aggr + component.updateCount,
    0
  )

export const componentsStatePathCount: Derive = (state) =>
  state.componentsMounted.reduce(
    (aggr, component) => aggr + component.paths.length,
    0
  )

export const flushes: Derive = (state) =>
  Object.keys(state.currentApp.flushes)
    .sort(
      (idA, idB) =>
        state.currentApp.flushes[idB].flushId -
        state.currentApp.flushes[idA].flushId
    )
    .map((id) => state.currentApp.flushes[id])

export const flushesMutationsCount: Derive = (state) =>
  state.flushes.reduce((aggr, flush) => aggr + flush.mutations.length, 0)

export const flushesStatePathCount: Derive = (state) =>
  state.flushes.reduce((aggr, flush) => {
    return flush.mutations.reduce(
      (aggr, mutation) =>
        aggr.includes(mutation.path) ? aggr : aggr.concat(mutation.path),
      aggr
    )
  }, []).length

export const currentAction: Derive = (state) =>
  state.currentApp.actions[state.currentApp.currentActionId]
