import { Action } from 'overmind'
import * as mutations from './mutations'
import * as operations from './operations'
import { Message, Tab } from './types'

const onMessage: Action<Message> = (action) =>
  action
    .mutate(mutations.performMutationsByMessageType)
    .mutate(mutations.addMessagesFromClient)

export const loadDevtools: Action = (action) =>
  // .do(({ storage }) => storage.clear())
  // Do a check if the current app matches the keys of the ???
  action
    .map(operations.getAppsFromStorage)
    .mutate(mutations.setApps)
    .map(operations.getCurrentPortFromStorage)
    .mutate(mutations.setCurrentPort)
    .mutate(mutations.setAppLoaded)
    .run(operations.connectCurrentPort(onMessage(action as any)))

export const setError: Action<string> = ({ mutate }) =>
  mutate(mutations.setError)

export const changeNewPortValue: Action<string> = (action) =>
  action.map(operations.toNumber).mutate(mutations.setNewPortValue)

export const addPort: Action = (action) =>
  action
    .map(operations.getNewPortFromState)
    .mutate(mutations.setCurrentPort)
    .mutate(mutations.addNewApp)
    .mutate(mutations.resetNewPortValue)
    .run(operations.storeApps)
    .run(operations.connectCurrentPort(onMessage))

export const changeTab: Action<Tab> = ({ mutate }) =>
  mutate(mutations.changeTab)

export const toggleExpandState: Action<string[]> = ({ mutate }) =>
  mutate(mutations.toggleExpandStatePath)

export const selectAction: Action<string> = ({ mutate }) =>
  mutate(mutations.toggleActionItemCollapse).mutate(mutations.selectAction)

type Collapsed = {
  isCollapsed: boolean
}

export const toggleCollapsed: Action<Collapsed> = (action) =>
  action
    .filter(operations.isNotExpandingAllActions)
    .mutate(mutations.toggleCollapsed)

export const configurePort: Action = ({ mutate }) =>
  mutate(mutations.configurePort)

export const cancelConfigurePort: Action = ({ mutate }) =>
  mutate(mutations.cancelConfigurePort)

export const removeApp: Action = (action) =>
  action
    .filter(operations.confirm('Are you sure you want to remove the app?'))
    .run(operations.removeCurrentPort)
    .mutate(mutations.removeApp)
    .run(operations.storeApps)
    .run(operations.connectCurrentPort(onMessage(action as any)))

export const selectPort: Action<string> = (action) =>
  action
    .mutate(mutations.selectPort)
    .run(operations.connectCurrentPort(onMessage(action as any)))

export const toggleExpandAllActions: Action = ({ mutate }) =>
  mutate(mutations.toggleExpandAllActions)
