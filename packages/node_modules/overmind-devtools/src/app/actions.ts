import { Action } from './'
import * as mutations from './mutations'
import * as operations from './operations'
import { Message, Tab } from './types'

const handleClientMessages: Action<Message> = (action) =>
  action
    .mutate(mutations.ensureCurrentApp)
    .mutate(mutations.performMutationsByMessageType)
    .mutate(mutations.addMessagesFromClient)

const setPortExists: Action<Message> = (action) =>
  action.mutate(mutations.setPortExists)

const onMessage: Action<Message> = (action) =>
  action.when(operations.isPortExistsMessage, {
    true: setPortExists,
    false: handleClientMessages,
  })

export const loadDevtools: Action = (action) =>
  action
    // .run(({ storage }) => storage.clear())
    .map(operations.getCurrentPortFromStorage)
    .mutate(mutations.setPort)
    .run(operations.connectCurrentPort(onMessage(action as any)))

export const setError: Action<string> = ({ mutate }) =>
  mutate(mutations.setError)

export const changeNewPortValue: Action<string> = (action) =>
  action.map(operations.toNumber).mutate(mutations.setNewPortValue)

export const addConnection: Action = (action) =>
  action
    .mutate(mutations.setConnecting)
    .map(operations.getNewPortFromState)
    .mutate(mutations.setPort)
    .mutate(mutations.resetNewPortValue)
    .run(operations.connectCurrentPort(onMessage))

export const changeTab: Action<Tab> = ({ mutate }) =>
  mutate(mutations.changeTab)

export const toggleExpandState: Action<string[]> = ({ mutate }) =>
  mutate(mutations.toggleExpandStatePath)

export const selectAction: Action<string> = ({ mutate }) =>
  mutate(mutations.toggleActionItemCollapse).mutate(mutations.selectAction)

type Collapsed = {
  isCollapsed: boolean
}

export const toggleCollapsedActionItem: Action<Collapsed> = (action) =>
  action
    .filter(operations.isNotExpandingAllActions)
    .mutate(mutations.toggleCollapsed)

export const toggleGroupedComponent: Action<string> = (action) =>
  action.mutate(mutations.toggleGroupedComponent)

export const selectApp: Action<string> = (action) =>
  action.mutate(mutations.selectApp)

export const toggleExpandAllActions: Action = ({ mutate }) =>
  mutate(mutations.toggleExpandAllActions)
