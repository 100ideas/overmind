import { ipcRenderer } from 'electron'

import { AppMessage, AppMessageType } from './overmind/types'

type Message = {
  appName: string
  messages: AppMessage<any>[]
}

type MessageCallback = (message: Message) => void

export class BackendConnector {
  port: string
  messageCallback: MessageCallback
  constructor() {
    ipcRenderer.on('port:exists', this.onPortExists)
  }
  connect(port: string) {
    ipcRenderer.send('connect', port)
  }
  onMessage = (onMessage: MessageCallback) => {
    this.messageCallback = onMessage
    ipcRenderer.on('message', (_, message) => onMessage(message))
  }
  onPortExists = (_) => {
    this.messageCallback({
      appName: null,
      messages: [
        {
          appName: '',
          type: AppMessageType.PORT_EXISTS,
          data: null,
        },
      ],
    })
  }
  sendMessage(appName: string, eventName: string, payload: object = null) {
    ipcRenderer.send('message', {
      appName,
      type: eventName,
      data: payload,
    })
  }
  relaunch() {
    ipcRenderer.send('relaunch')
  }
}

export default BackendConnector
