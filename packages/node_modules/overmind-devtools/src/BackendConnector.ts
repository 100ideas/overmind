import { ipcRenderer } from 'electron'
import { AppMessage } from './app/types'

type Message = {
  appName: string
  messages: AppMessage[]
}

type MessageCallback = (message: Message) => void

class BackendConnector {
  port: string
  messageCallback: MessageCallback
  constructor() {
    ipcRenderer.on('port:exists', this.onPortExists)
  }
  connect(port: string, messageCallback: MessageCallback) {
    this.messageCallback = messageCallback
    ipcRenderer.send('connect', port)
    ipcRenderer.on('message', this.onMessage)
  }
  onMessage = (_, message) => {
    this.messageCallback(message)
  }
  onPortExists = (_) => {
    this.messageCallback({
      appName: null,
      messages: [
        {
          type: 'PORT_EXISTS',
          data: null,
        },
      ],
    })
  }
  sendMessage(appName: string, eventName: string, payload: object = null) {
    ipcRenderer.send('message', {
      appName,
      type: eventName,
      data: payload,
    })
  }
  relaunch() {
    ipcRenderer.send('relaunch')
  }
}

export default BackendConnector
