import * as React from 'react'
import { isObject, isArray } from './utils'
import {
  Wrapper,
  Key,
  Bracket,
  StringValue,
  GenericValue,
  NestedChildren,
  InlineNested,
} from './elements'

type NestedProps = {
  startBracket: string
  endBracket: string
  expandedPaths: string[]
  path: string[]
  keys: string[]
  isArray: boolean
  children: () => React.ReactNode
  onToggleExpand: (path: string[]) => void
}

class Nested extends React.PureComponent<NestedProps> {
  hasMounted: boolean = false
  componentDidMount() {
    this.hasMounted = true
  }
  render() {
    const {
      keys,
      expandedPaths,
      path,
      onToggleExpand,
      startBracket,
      endBracket,
      children,
      isArray,
    } = this.props
    const shouldCollapse =
      (this.hasMounted && !expandedPaths.includes(path.join('.'))) ||
      (!this.hasMounted && !expandedPaths.includes(path.join('.')))

    if (shouldCollapse) {
      return (
        <InlineNested onClick={() => onToggleExpand(path)}>
          {path.length ? (
            <Key>{this.props.path[this.props.path.length - 1]}:</Key>
          ) : null}
          {startBracket} {isArray ? keys.length : keys.slice(0, 3).join(', ')}{' '}
          {endBracket}
        </InlineNested>
      )
    }

    return (
      <React.Fragment>
        <Bracket onClick={() => onToggleExpand(path)}>
          {path.length ? (
            <Key>{this.props.path[this.props.path.length - 1]}:</Key>
          ) : null}
          {startBracket}
        </Bracket>
        <NestedChildren>{children()}</NestedChildren>
        <Bracket>{endBracket}</Bracket>
      </React.Fragment>
    )
  }
}

type ValueComponentProps = {
  value: string | number | boolean
  path: string[]
}

class ValueComponent extends React.PureComponent<ValueComponentProps> {
  render() {
    if (typeof this.props.value === 'string') {
      return (
        <StringValue>
          <Key>{this.props.path[this.props.path.length - 1]}:</Key> "{
            this.props.value
          }"
        </StringValue>
      )
    }
    return (
      <GenericValue>
        <Key>{this.props.path[this.props.path.length - 1]}:</Key>{' '}
        {String(this.props.value)}
      </GenericValue>
    )
  }
}

type InspectorProps = {
  value: object
  expandedPaths: string[]
  onToggleExpand: (path: string[]) => void
}

class Inspector extends React.PureComponent<InspectorProps> {
  renderValue(path: string[], value: any) {
    if (isObject(value)) {
      return (
        <Nested
          key={path.join('.')}
          startBracket="{"
          endBracket="}"
          path={path}
          expandedPaths={this.props.expandedPaths}
          onToggleExpand={this.props.onToggleExpand}
          keys={Object.keys(value)}
          isArray={false}
        >
          {() =>
            Object.keys(value).map((key) =>
              this.renderValue(path.concat(key), value[key])
            )
          }
        </Nested>
      )
    } else if (isArray(value)) {
      return (
        <Nested
          key={path.join('.')}
          startBracket="["
          endBracket="]"
          path={path}
          expandedPaths={this.props.expandedPaths}
          onToggleExpand={this.props.onToggleExpand}
          keys={Object.keys(value)}
          isArray
        >
          {() =>
            value.map((key, index) =>
              this.renderValue(path.concat(index), value[index])
            )
          }
        </Nested>
      )
    }

    return <ValueComponent key={path.join('.')} path={path} value={value} />
  }
  render() {
    return <Wrapper>{this.renderValue([], this.props.value)}</Wrapper>
  }
}

export default Inspector
