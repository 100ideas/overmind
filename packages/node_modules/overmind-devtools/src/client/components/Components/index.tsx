import * as React from 'react'
import { connect, Connect } from '../../app'
import Text from '../common/Text'
import Table, { Row, Cell } from '../common/Table'
import Pill from '../common/Pill'
import { Wrapper, Panels, Panel } from './elements'

const Components: React.SFC<Connect> = ({ appState }) => {
  const components = appState.apps[appState.currentPort].components
  const keys = Object.keys(components)
  const mountedKeys = keys.filter((key) => components[key].isMounted)
  const updatesCount = keys.reduce(
    (aggr, key) => aggr + components[key].updateCount,
    0
  )
  const statePathsCount = keys.reduce(
    (aggr, key) => aggr + components[key].paths.length,
    0
  )
  return (
    <Wrapper>
      <Panels>
        <Panel>
          <Text variant="label" dense>
            connected
          </Text>
          <Text variant="header" dense>
            {mountedKeys.length}
          </Text>
        </Panel>
        <Panel>
          <Text variant="label" dense>
            updates
          </Text>
          <Text variant="header" dense>
            {updatesCount}
          </Text>
        </Panel>
        <Panel>
          <Text variant="label" dense>
            values watched
          </Text>
          <Text variant="header" dense>
            {statePathsCount}
          </Text>
        </Panel>
      </Panels>
      <Table headers={['name', 'updates', 'values']}>
        {mountedKeys.map((key) => {
          const component = components[key]
          return (
            <Row key={component.id}>
              <Cell>{component.name}</Cell>
              <Cell>
                <Text variant="title" dense>
                  {component.updateCount}
                </Text>
              </Cell>
              <Cell>
                {component.paths.map((path) => <Pill key={path}>{path}</Pill>)}
              </Cell>
            </Row>
          )
        })}
      </Table>
    </Wrapper>
  )
}

export default connect(Components)
