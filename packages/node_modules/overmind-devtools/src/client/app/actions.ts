import { Action, Context } from './'
import { State, Apps, Message } from './state'

/*
  TASKS
*/

const getAppsFromStorage = (_, { storage }: Context) => storage.get('apps')

const getCurrentPortFromStorage = (_, { storage }: Context) =>
  storage.get('currentPort')

const getNewPortFromState = (_, { state }: Context) => state.newPortValue

const storeApps = (_, { storage, state }: Context) =>
  storage.set('apps', state.apps)

const toNumber = (value: string) => String(Number(value))

const connectCurrentPort = (action: (message: any) => void) => (
  _,
  { state, connector }: Context
) => connector.addPort(state.currentPort, action)

/*
  MUTATIONS
*/

const setApps = (state: State, apps: Apps) => (state.apps = apps || {})

const setCurrentPort = (state: State, currentPort: string) => {
  if (currentPort) {
    state.currentPort = currentPort
  } else if (Object.keys(state.apps).length) {
    state.currentPort = Object.keys(state.apps)[0]
  }
}

const setError = (state: State, error: string) => (state.error = error)

const setAppLoaded = (state: State) => (state.isLoading = false)

const setNewPortValue = (state: State, value: string) =>
  (state.newPortValue = value)

const addNewApp = (state: State) =>
  (state.apps[state.newPortValue] = {
    name: null,
    port: state.newPortValue,
    messages: [],
  })

const resetNewPortValue = (state: State) => (state.newPortValue = '')

const addMessageFromClient = (state: State, message: Message) => {
  state.apps[message.port].messages = state.apps[message.port].messages.concat(
    message.message
  )
}

/*
  ACTIONS
*/

export default (action: Action) => {
  const onMessage = action<any>().mutation(addMessageFromClient)

  return {
    loadDevtools: action()
      .map(getAppsFromStorage)
      .mutation(setApps)
      .map(getCurrentPortFromStorage)
      .mutation(setCurrentPort)
      .mutation(setAppLoaded)
      .map(connectCurrentPort(onMessage)),
    setError: action<string>().mutation(setError),
    changeNewPortValue: action<string>()
      .map(toNumber)
      .mutation(setNewPortValue),
    addPort: action()
      .map(getNewPortFromState)
      .mutation(setCurrentPort)
      .mutation(addNewApp)
      .mutation(resetNewPortValue)
      .do(storeApps),
    openApp: action<string>(),
  }
}
