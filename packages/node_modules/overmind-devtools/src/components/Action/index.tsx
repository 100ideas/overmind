import { h } from 'overmind-components'
import { Component } from '../../app'
import * as styles from './styles'
import ActionOperator from '../ActionOperator'
import Flush from '../ActionFlush'
import { getActionId, getOperatorId } from '../../app/utils'
import { css } from 'emotion'

const Action: Component = ({ state, actions }) => {
  const flushReference =
    state.currentApp.flushByActionId[getActionId(state.currentAction)]
  const flush =
    flushReference && state.currentApp.flushes[flushReference.flushId]

  return (
    <div className={styles.wrapper}>
      <div
        className={css(
          styles.expandAll,
          state.expandAllActionDetails && styles.expandAllActive
        )}
        onClick={() => actions.toggleExpandAllActions()}
      >
        expand all
      </div>
      {state.currentAction.operators.map((operator, index) => {
        const prevOperator = state.currentAction.operators[index - 1]
        const value =
          index === 0 ? state.currentAction.value : prevOperator.result
        const flushReference =
          state.currentApp.flushByOperatorId[getOperatorId(operator)]
        const flush =
          flushReference && state.currentApp.flushes[flushReference.flushId]

        if (flush) {
          return (
            <div key={operator.actionId + '_' + operator.operatorId}>
              <ActionOperator
                prevOperator={prevOperator}
                operator={operator}
                value={value}
                operatorIndex={index}
              />
              <Flush flush={flush} />
            </div>
          )
        }

        return (
          <ActionOperator
            key={operator.actionId + '_' + operator.operatorId}
            prevOperator={prevOperator}
            operator={operator}
            value={value}
            operatorIndex={index}
          />
        )
      })}
      {!state.currentAction.isRunning && flush ? <Flush flush={flush} /> : null}
    </div>
  )
}

export default Action
