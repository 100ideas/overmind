import { createElement, SFC } from 'react'
import { useOvermind } from '../../app'
import Table, { Row, Cell } from '../common/Table'
import * as styles from './styles'
import * as textStyles from '../../styles/text'
import { GroupedComponent } from '../../app/types'
import Icon from '../common/Icon'
import { css } from 'emotion'

const Components: SFC = () => {
  const { state, actions } = useOvermind()

  function renderComponentsGroupExpanded(groupedComponent: GroupedComponent) {
    return groupedComponent.components.map((component) => {
      return (
        <Row key={component.id}>
          <Cell>{component.name}</Cell>
          <Cell>
            <span className={css(textStyles.title, textStyles.denseTitle)}>
              {component.updateCount}
            </span>
          </Cell>
          <Cell wordwrap="break-word" mono>
            {component.paths.join(', ')}
          </Cell>
        </Row>
      )
    })
  }

  function renderComponentsGroupCollapsed(groupedComponent: GroupedComponent) {
    return (
      <Row key={groupedComponent.name}>
        <Cell>
          {groupedComponent.name} ({groupedComponent.components.length})
        </Cell>
        <Cell>
          <span className={css(textStyles.title, textStyles.denseTitle)}>
            {groupedComponent.components.reduce(
              (aggr, component) => aggr + component.updateCount,
              0
            )}
          </span>
        </Cell>
        <Cell wordwrap="break-word" mono />
      </Row>
    )
  }

  function renderStats() {
    return (
      <div className={styles.statsContainer}>
        <div className={styles.panels}>
          <div className={styles.panel}>
            <span className={css(textStyles.label, textStyles.denseLabel)}>
              connected
            </span>
            <span className={css(textStyles.header, textStyles.denseHeader)}>
              {state.componentsMounted.length}
            </span>
          </div>
          <div className={styles.panel}>
            <span className={css(textStyles.label, textStyles.denseLabel)}>
              update count
            </span>
            <span className={css(textStyles.header, textStyles.denseHeader)}>
              {state.componentsUpdateCount}
            </span>
          </div>
          <div className={styles.panel}>
            <span className={css(textStyles.label, textStyles.denseLabel)}>
              paths watched
            </span>
            <span className={css(textStyles.header, textStyles.denseHeader)}>
              {state.componentsStatePathCount}
            </span>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className={styles.wrapper}>
      {renderStats()}
      <Table
        headers={[
          { title: 'name', width: '150px' },
          { title: 'updates', width: '100px' },
          { title: 'paths', width: 'calc(100% - 250px)' },
        ]}
      >
        {Object.keys(state.groupedComponents).map((name) => {
          const groupedComponent = state.groupedComponents[name]
          const isGroup = groupedComponent.components.length > 1

          return (
            <Row key={name}>
              <Cell colSpan={3}>
                <div
                  className={styles.componentContainer(isGroup)}
                  onClick={
                    isGroup ? () => actions.toggleGroupedComponent(name) : null
                  }
                >
                  <div>
                    <Table
                      headers={[
                        { title: '', width: '150px' },
                        { title: '', width: '100px' },
                        { title: '', width: 'calc(100% - 250px)' },
                      ]}
                    >
                      {groupedComponent.isCollapsed && isGroup
                        ? renderComponentsGroupCollapsed(groupedComponent)
                        : renderComponentsGroupExpanded(groupedComponent)}
                    </Table>
                  </div>
                  {isGroup ? (
                    <span className={textStyles.hint}>
                      {groupedComponent.isCollapsed ? (
                        <Icon>chevron-up</Icon>
                      ) : (
                        <Icon>chevron-down</Icon>
                      )}
                    </span>
                  ) : null}
                </div>
              </Cell>
            </Row>
          )
        })}
      </Table>
    </div>
  )
}

export default Components
