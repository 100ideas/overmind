import * as React from 'react'
import { connect, Connect } from '../../app'
import Text from '../common/Text'
import Table, { Row, Cell } from '../common/Table'
import {
  Wrapper,
  Panels,
  Panel,
  ComponentContainer,
  StatsContainer,
} from './elements'
import { GroupedComponent } from '../../app/types'
import Icon from '../common/Icon'

class Components extends React.Component<Connect> {
  renderComponentsGroupExpanded(groupedComponent: GroupedComponent) {
    return groupedComponent.components.map((component) => {
      return (
        <Row key={component.id}>
          <Cell>{component.name}</Cell>
          <Cell>
            <Text variant="title" dense>
              {component.updateCount}
            </Text>
          </Cell>
          <Cell wordwrap="break-word" mono>
            {component.paths.join(', ')}
          </Cell>
        </Row>
      )
    })
  }
  renderComponentsGroupCollapsed(groupedComponent: GroupedComponent) {
    return (
      <Row key={groupedComponent.name}>
        <Cell>
          {groupedComponent.name} ({groupedComponent.components.length})
        </Cell>
        <Cell>
          <Text variant="title" dense>
            {groupedComponent.components.reduce(
              (aggr, component) => aggr + component.updateCount,
              0
            )}
          </Text>
        </Cell>
        <Cell wordwrap="break-word" mono />
      </Row>
    )
  }
  renderStats() {
    const { app } = this.props

    return (
      <StatsContainer>
        <Panels>
          <Panel>
            <Text variant="label" dense>
              connected
            </Text>
            <Text variant="header" dense>
              {app.state.componentsMounted.length}
            </Text>
          </Panel>
          <Panel>
            <Text variant="label" dense>
              update count
            </Text>
            <Text variant="header" dense>
              {app.state.componentsUpdateCount}
            </Text>
          </Panel>
          <Panel>
            <Text variant="label" dense>
              paths watched
            </Text>
            <Text variant="header" dense>
              {app.state.componentsStatePathCount}
            </Text>
          </Panel>
        </Panels>
      </StatsContainer>
    )
  }
  render() {
    const { app } = this.props

    return (
      <Wrapper>
        {this.renderStats()}
        <Table
          headers={[
            { title: 'name', width: '150px' },
            { title: 'updates', width: '100px' },
            { title: 'paths', width: 'calc(100% - 250px)' },
          ]}
        >
          {Object.keys(app.state.groupedComponents).map((name) => {
            const groupedComponent = app.state.groupedComponents[name]
            const isGroup = groupedComponent.components.length > 1

            return (
              <Row key={name}>
                <Cell colSpan={3}>
                  <ComponentContainer
                    canExpand={isGroup}
                    onClick={
                      isGroup
                        ? () => app.actions.toggleGroupedComponent(name)
                        : null
                    }
                  >
                    <div>
                      <Table
                        headers={[
                          { title: '', width: '150px' },
                          { title: '', width: '100px' },
                          { title: '', width: 'calc(100% - 250px)' },
                        ]}
                      >
                        {groupedComponent.isCollapsed && isGroup
                          ? this.renderComponentsGroupCollapsed(
                              groupedComponent
                            )
                          : this.renderComponentsGroupExpanded(
                              groupedComponent
                            )}
                      </Table>
                    </div>
                    {isGroup ? (
                      <Text variant="hint">
                        {groupedComponent.isCollapsed ? (
                          <Icon>chevron-up</Icon>
                        ) : (
                          <Icon>chevron-down</Icon>
                        )}
                      </Text>
                    ) : null}
                  </ComponentContainer>
                </Cell>
              </Row>
            )
          })}
        </Table>
      </Wrapper>
    )
  }
}

export default connect(Components)
