import * as React from 'react'
import { connect, Connect } from '../../app'
import { Operator as OperatorType } from '../../app/types'
import ValueInspector from '../ValueInspector'
import Text from '../common/Text'
import Icon from '../common/Icon'
import Path from '../ActionPath'
import { Pipe } from '../Action/elements'
import { Operator, OperatorHeader, OperatorItem } from './elements'

type Props = {
  prevOperator: OperatorType
  operator: OperatorType
  value: any
} & Connect

const ActionOperator: React.SFC<Props> = ({
  prevOperator,
  operator,
  value,
  app,
}) => {
  const isExpanded = app.state.expandAllActionDetails || !operator.isCollapsed

  return (
    <React.Fragment key={operator.operatorId}>
      {value === undefined ? null : (
        <Pipe>
          <Path />
          <ValueInspector value={value} small />
        </Pipe>
      )}
      <Pipe>
        <Path
          visible={
            prevOperator &&
            prevOperator.path.join('.') !== operator.path.join('.')
          }
          borderColor={operator.type === 'mutate' ? 'red' : 'primary'}
        >
          {operator.path.length ? (
            <Text variant="hint">
              <b>{operator.path.join('.')}</b>
            </Text>
          ) : null}
        </Path>
        <Operator
          borderColor={operator.type === 'mutate' ? 'red' : 'primary'}
          onClick={
            operator.mutations.length || operator.effects.length
              ? () => app.actions.toggleCollapsed(operator)
              : null
          }
        >
          <OperatorHeader>
            <Text
              variant="text"
              color={operator.type === 'mutate' ? 'red' : 'primary'}
              dense
            >
              {operator.type}
            </Text>
            <Text variant="text" dense>
              {operator.name}
            </Text>
            {operator.mutations.length || operator.effects.length ? (
              <Text variant="hint">
                {isExpanded ? (
                  <Icon>chevron-down</Icon>
                ) : (
                  <Icon>chevron-up</Icon>
                )}
              </Text>
            ) : null}
          </OperatorHeader>
          {isExpanded ? (
            <div onClick={(event) => event.stopPropagation()}>
              {operator.effects.map((effect, index) => (
                <OperatorItem key={index}>
                  <Text variant="description" color="primary" mono>
                    {effect.name + '.' + effect.method}
                  </Text>
                  <ValueInspector
                    small
                    value={
                      effect.args.length > 1 ? effect.args : effect.args[0]
                    }
                  />
                  <Text variant="description" mono>
                    =>
                  </Text>
                  <ValueInspector small value={effect.result} />
                </OperatorItem>
              ))}
              {operator.mutations.map((mutation, index) => (
                <OperatorItem key={index}>
                  <Text variant="description" color="red" mono>
                    {mutation.method}
                  </Text>
                  <Text variant="description" mono>
                    {mutation.path}
                  </Text>
                  <ValueInspector
                    small
                    value={
                      mutation.args.length > 1
                        ? mutation.args
                        : mutation.args[0]
                    }
                  />
                </OperatorItem>
              ))}
            </div>
          ) : null}
        </Operator>
      </Pipe>
    </React.Fragment>
  )
}

export default connect(ActionOperator)
