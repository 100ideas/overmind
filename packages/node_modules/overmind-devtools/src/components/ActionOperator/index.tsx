import { h, Component, useOvermind } from 'overmind-components'
import { Operator as OperatorType } from '../../app/types'
import ValueInspector from '../ValueInspector'
import Icon from '../common/Icon'
import Path from '../ActionPath'
import * as styles from './styles'
import * as actionStyles from '../Action/styles'
import * as textStyles from '../../styles/text'
import { css } from 'emotion'

type Props = {
  prevOperator: OperatorType
  operator: OperatorType
  value: any
  operatorIndex: number
}

const ActionOperator: Component<Props> = ({
  prevOperator,
  operator,
  value,
  operatorIndex,
}) => {
  const { state, actions } = useOvermind()
  const isExpanded = state.expandAllActionDetails || !operator.isCollapsed

  return (
    <div>
      {value === undefined ? null : (
        <div className={actionStyles.pipe}>
          <Path showPathTag={false} visible={false}>
            {operator.path.length ? (
              <span className={textStyles.hint}>
                <b>{operator.path.join('.')}</b>
              </span>
            ) : null}
          </Path>
          <ValueInspector value={value} small />
        </div>
      )}
      <div className={actionStyles.pipe}>
        <Path
          visible={
            Boolean(prevOperator) &&
            Boolean(operator.path.length) &&
            prevOperator.path.join('.') !== operator.path.join('.')
          }
          borderColor={operator.type === 'mutate' ? 'red' : 'primary'}
        >
          {operator.path.length ? (
            <span className={textStyles.hint}>
              <b>{operator.path.join('.')}</b>
            </span>
          ) : null}
        </Path>
        <div
          className={css(
            styles.operator(
              operator.type === 'mutate'
                ? 'var(--color-red)'
                : 'var(--color-primary)'
            ),
            operator.mutations.length ||
              (operator.effects.length && styles.operatorClickable)
          )}
          onClick={
            operator.mutations.length || operator.effects.length
              ? () => actions.toggleCollapsedOperator(operatorIndex)
              : null
          }
        >
          <div className={styles.operatorHeader}>
            <span
              className={css(
                textStyles.normal,
                operator.type === 'mutate'
                  ? textStyles.red
                  : textStyles.primary,
                textStyles.denseNormal
              )}
            >
              {operator.type}
            </span>
            <span className={css(textStyles.normal, textStyles.denseNormal)}>
              {operator.name}
            </span>
            {operator.mutations.length || operator.effects.length ? (
              <span className={textStyles.hint}>
                {isExpanded ? (
                  <Icon>chevron-down</Icon>
                ) : (
                  <Icon>chevron-up</Icon>
                )}
              </span>
            ) : null}
          </div>
          {isExpanded ? (
            <div onClick={(event) => event.stopPropagation()}>
              {operator.effects.map((effect, index) => (
                <div className={styles.operatorItem} key={index}>
                  <span
                    className={css(
                      textStyles.description,
                      textStyles.primary,
                      textStyles.monospace
                    )}
                  >
                    {effect.name + '.' + effect.method}
                  </span>
                  <ValueInspector
                    small
                    value={
                      effect.args.length > 1 ? effect.args : effect.args[0]
                    }
                  />
                  <span
                    className={css(
                      textStyles.description,
                      textStyles.monospace
                    )}
                  >
                    =>
                  </span>
                  <ValueInspector small value={effect.result} />
                </div>
              ))}
              {operator.mutations.map((mutation, index) => (
                <div className={styles.operatorItem} key={index}>
                  <span
                    className={css(
                      textStyles.description,
                      textStyles.red,
                      textStyles.monospace
                    )}
                  >
                    {mutation.method}
                  </span>
                  <span
                    className={css(
                      textStyles.description,
                      textStyles.monospace
                    )}
                  >
                    {mutation.path}
                  </span>
                  <ValueInspector
                    small
                    value={
                      mutation.args.length > 1
                        ? mutation.args
                        : mutation.args[0]
                    }
                  />
                </div>
              ))}
            </div>
          ) : null}
        </div>
      </div>
    </div>
  )
}

export default ActionOperator
