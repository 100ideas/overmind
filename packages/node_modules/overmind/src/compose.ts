type TComposition = {
  [prop: string]: {
    state?: any
    providers?: any
    actions?: any
  }
}

export default function compose<Composition extends TComposition>(
  composition: Composition
): {
  state: { [Prop in keyof Composition]: Composition[Prop]['state'] }
  providers: { [Prop in keyof Composition]: Composition[Prop]['providers'] }
  actions: { [Prop in keyof Composition]: Composition[Prop]['actions'] }
} {
  return Object.keys(composition).reduce(
    (aggr, key) =>
      Object.assign({
        state: {
          ...aggr.state,
          [key]: composition[key].state || {},
        },
        providers: {
          ...aggr.providers,
          [key]: composition[key].providers || {},
        },
        actions: {
          ...aggr.actions,
          [key]: composition[key].actions || {},
        },
      }),
    {
      state: {},
      providers: {},
      actions: {},
    }
  )
}
