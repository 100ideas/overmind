import App, { computed } from './'

describe.only('Computed', () => {
  test('should instantiate app with computed', () => {
    const app = new App({
      state: {
        foo: 'bar',
      },
      computed: {
        test: (foo: number) => (state) => state.foo + foo,
      },
    })
    expect(app.computed.test(123)).toEqual('bar123')
  })
  test('should not recalculate when not dirty', () => {
    let runCount = 0
    const app = new App({
      state: {
        foo: 'bar',
      },
      computed: {
        test: (foo: number) => (state) => {
          runCount++
          return state.foo + foo
        },
      },
    })
    app.computed.test(123)
    app.computed.test(123)
    expect(runCount).toEqual(1)
  })
  test('should create new cache entry when args change', () => {
    let runCount = 0
    const app = new App({
      state: {
        foo: 'bar',
      },
      computed: {
        test: (foo: number) => (state) => {
          runCount++
          return state.foo + foo
        },
      },
    })
    app.computed.test(123)
    app.computed.test(321)
    expect(runCount).toEqual(2)
  })
  test('should flag as dirty when state changes', () => {
    let runCount = 0
    const app = new App({
      state: {
        foo: 'bar',
      },
      computed: {
        test: (foo: number) => (state) => {
          runCount++
          return state.foo + foo
        },
      },
      actions: (action) => ({
        changeFoo: action().mutation((_, state) => (state.foo = 'bar2')),
      }),
    })
    app.computed.test(123)
    app.actions.changeFoo()
    expect(app.computed.test(123)).toEqual('bar2123')
    expect(runCount).toEqual(2)
  })
  test('should use factory to adjust cache limit', () => {
    let runCount = 0
    type State = {
      foo: string
    }
    const app = new App({
      state: {
        foo: 'bar',
      },
      computed: {
        test: computed(
          (foo: number) => (state: State) => {
            runCount++
            return state.foo + foo
          },
          {
            cacheLimit: 1,
          }
        ),
      },
    })
    app.computed.test(123)
    app.computed.test(432)
    app.computed.test(123)
    expect(runCount).toEqual(3)
  })
})

/*
  - Should expose to actions as provider
*/
