export type Message = {
  type: string
  data?: object
}

function debounce(func, wait) {
  let timeout
  return function() {
    const context = this
    const args = arguments

    const later = function() {
      timeout = null
      func.apply(context, args)
    }

    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}

export default class Devtools {
  buffer: Message[]
  ws: WebSocket
  isConnected: boolean
  doReconnect: boolean
  hasWarnedReconnect: boolean
  reconnectInterval: number
  constructor() {
    this.ws = null
    this.isConnected = false
    this.doReconnect = false
    this.reconnectInterval = 10000
    this.hasWarnedReconnect = false
    this.buffer = []
  }
  connect = (host: string, onMessage: (message: Message) => void) => {
    this.ws = new WebSocket(`ws://${host}`)
    this.ws.onmessage = (event) => onMessage(JSON.parse(event.data))
    this.ws.onopen = () => {
      this.isConnected = true
      this.sendBuffer()
    }
    this.ws.onerror = () => {}
    this.ws.onclose = () => {
      this.isConnected = false

      if (this.doReconnect && !this.hasWarnedReconnect) {
        console.warn(
          'Debugger application is not running on selected port... will reconnect automatically behind the scenes'
        )
        this.hasWarnedReconnect = true
      }

      if (this.doReconnect) {
        this.reconnect(host, onMessage)
      }
    }
  }
  private reconnect(host, onMessage) {
    setTimeout(
      () =>
        this.connect(
          host,
          onMessage
        ),
      this.reconnectInterval
    )
  }
  send(message: Message) {
    this.buffer.push(message)
    this.sendBuffer()
  }
  private sendBuffer = debounce(function() {
    if (this.isConnected) {
      this.ws.send(JSON.stringify(this.buffer))
      this.buffer.length = 0
    }
  }, 50)
}
