import { IS_PROXY } from 'proxy-state-tree'
// Needed due to Parcel + Webpack support
const isPlainObject = require('is-plain-object')

export type Message = {
  type: string
  data?: object
}

export function safeValue(value) {
  if (
    typeof value === 'object' &&
    !Array.isArray(value) &&
    value !== null &&
    !isPlainObject(value)
  ) {
    return `[${value.constructor.name || 'NOT SERIALIZABLE'}]`
  }

  return value && !value[IS_PROXY] && isPlainObject(value)
    ? Object.keys(value).reduce((aggr, key) => {
        aggr[key] = safeValue(value[key])

        return aggr
      }, value)
    : value
}

export function safeValues(values) {
  return values.map(safeValue)
}

function debounce(func, wait) {
  let timeout
  return function() {
    const context = this
    const args = arguments

    const later = function() {
      timeout = null
      func.apply(context, args)
    }

    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}

export default class Devtools {
  private buffer: string[] = []
  private ws: WebSocket = null
  private isConnected: boolean = false
  private doReconnect: boolean = false
  private hasWarnedReconnect: boolean = false
  private reconnectInterval: number = 10000
  connect = (host: string, onMessage: (message: Message) => void) => {
    this.ws = new WebSocket(`ws://${host}`)
    this.ws.onmessage = (event) => onMessage(JSON.parse(event.data))
    this.ws.onopen = () => {
      this.isConnected = true
      this.sendBuffer()
    }
    this.ws.onerror = () => {}
    this.ws.onclose = () => {
      this.isConnected = false

      if (this.doReconnect && !this.hasWarnedReconnect) {
        console.warn(
          'Debugger application is not running on selected port... will reconnect automatically behind the scenes'
        )
        this.hasWarnedReconnect = true
      }

      if (this.doReconnect) {
        this.reconnect(host, onMessage)
      }
    }
  }
  private reconnect(host, onMessage) {
    setTimeout(
      () =>
        this.connect(
          host,
          onMessage
        ),
      this.reconnectInterval
    )
  }
  send(message: Message) {
    ;(window['__zone_symbol__setTimeout'] || setTimeout)(() => {
      this.buffer.push(JSON.stringify(message))
      this.sendBuffer()
    })
  }
  private sendBuffer = debounce(function() {
    if (this.isConnected) {
      this.ws.send('[' + this.buffer.join(',') + ']')
      this.buffer.length = 0
    }
  }, 50)
}
