import { Overmind, TAction, TReaction, run } from './'

describe('Reaction', () => {
  test('should instantiate app with reactions', () => {
    let hasRunReaction = false
    const foo: Action = ({ state }) => (state.foo = 'bar2')
    const react: Reaction = (reaction) =>
      reaction((state) => state.foo, () => (hasRunReaction = true))
    const config = {
      state: {
        foo: 'bar',
      },
      actions: {
        foo,
      },
      reactions: {
        react,
      },
    }
    type IConfig = {
      state: {
        foo: string
      }
      actions: typeof config.actions
      reactions: typeof config.reactions
    }
    type Action<Input = void> = TAction<IConfig, Input>
    type Reaction = TReaction<IConfig>
    const app = new Overmind(config)

    app.actions.foo()
    expect(hasRunReaction).toBe(true)
  })
  test('should react to nested changes', () => {
    let hasRunReaction = false
    const foo: Action = ({ state }) => (state.foo[0].completed = true)
    const hasRun = run<void, IConfig>(() => {
      hasRunReaction = true
    })
    const react: Reaction = (reaction) => reaction((state) => state.foo, hasRun)
    const config = {
      state: {
        foo: [
          {
            completed: false,
          },
        ],
      },
      actions: {
        foo,
      },
      reactions: {
        react,
      },
    }
    type IConfig = {
      state: {
        foo: typeof config.state.foo
      }
      actions: typeof config.actions
      reactions: typeof config.reactions
    }
    type Action<Input = void> = TAction<IConfig, Input>
    type Reaction = TReaction<IConfig>
    const app = new Overmind(config)
    app.actions.foo()
    expect(hasRunReaction).toBe(true)
  })
})
