import { Overmind, TAction, TApp, TDerive } from './'

type State = {
  foo: string
  upperFoo: string
}

describe('Derived', () => {
  test('should instantiate app with derived state', () => {
    const derived: Derive<string> = (state) => state.foo.toUpperCase()
    const state = {
      foo: 'bar',
      upperFoo: derived,
    }
    const config = {
      state,
    }

    type IApp = TApp<{
      state: typeof state
    }>

    type Derive<Value> = TDerive<IApp, Value>

    const app = new Overmind(config)

    expect(app.state.upperFoo).toEqual('BAR')
  })

  test('should track derived state', () => {
    let renderCount = 0
    const changeFoo: Action = ({ state }) => (state.foo = 'bar2')

    const derived: Derive<string> = (state: State) => state.foo.toUpperCase()

    const config = {
      state: {
        foo: 'bar',
        upperFoo: derived,
      },
      actions: {
        changeFoo,
      },
    }
    type IApp = TApp<{
      state: {
        foo: string
        upperFoo: string
      }
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<IApp, Input, Output>
    type Derive<Value> = TDerive<IApp, Value>

    const app = new Overmind(config)
    function render() {
      const trackId = app.trackState()
      app.state.upperFoo
      return app.clearTrackState(trackId)
    }
    app.addMutationListener(render(), () => {
      renderCount++
    })
    app.actions.changeFoo()
    expect(app.state.upperFoo).toBe('BAR2')
    expect(renderCount).toBe(1)
  })
  test('should not require flush to flag as dirty', () => {
    expect.assertions(1)
    const changeFoo: Action = ({ state }) => {
      state.foo = 'bar2'
      expect(state.upperFoo).toBe('BAR2')
    }

    const derived: Derive<string> = (state: State) => state.foo.toUpperCase()

    const config = {
      state: {
        foo: 'bar',
        upperFoo: derived,
      },
      actions: {
        changeFoo,
      },
    }
    type IApp = TApp<{
      state: {
        foo: string
        upperFoo: string
      }
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<IApp, Input, Output>
    type Derive<Value> = TDerive<IApp, Value>

    const app = new Overmind(config)
    app.actions.changeFoo()
  })
})
