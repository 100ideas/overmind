import { Configuration } from './'

interface ModulesConfiguration {
  [namespace: string]: {
    onInitialize?: any
    state?: {}
    effects?: {}
    actions?: {}
    reactions?: {}
  }
}

function parseModule(
  result: { actions: any; effects: any; state: any; initializers: any[] },
  modName: string,
  mod: Configuration
) {
  const { actions, effects, onInitialize, state }: Configuration = mod

  if (actions) {
    result.actions[modName] = actions
  }
  if (effects) {
    result.effects[modName] = effects
  }
  if (state) {
    result.state[modName] = state
  }
  if (onInitialize) {
    result.initializers.push(onInitialize)
  }
}

export function modules<T extends ModulesConfiguration>(
  modules: T
): {
  onInitialize?: any
  state: { [P in keyof T]: T[P]['state'] }
  effects: { [P in keyof T]: T[P]['effects'] }
  actions: { [P in keyof T]: T[P]['actions'] }
} {
  const result: any = {
    initializers: [],
    actions: {},
    effects: {},
    state: {},
  }

  Object.keys(modules).forEach((modName) => {
    parseModule(result, modName, modules[modName])
  })

  const onInitialize = (context) =>
    Promise.all(result.initializers.map((cb) => cb(context)))

  return {
    onInitialize,
    actions: result.actions,
    effects: result.effects,
    state: result.state,
  }
}
