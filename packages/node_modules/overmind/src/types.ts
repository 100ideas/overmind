import { ResolveActions, ResolveState, TBaseContext } from './internalTypes'
import { Operator } from './'

/** ===== PUBLIC API
 */
export { EventType } from './internalTypes'

export type Configuration = {
  onInitialize?: any
  state?: {}
  effects?: {}
  actions?: {}
  reactions?: {}
}

export type BaseApp = {
  state: {}
  effects: {}
  actions: {}
}

export interface TApp<Config extends Configuration> {
  // Resolves `Derive` types in state.
  state: ResolveState<Config['state']>
  // Transform actions into callable functions.
  actions: ResolveActions<Config['actions']>
  effects: [Config['effects']] extends [void] ? {} : Config['effects']
}

export type TContext<App extends BaseApp, Value> = TBaseContext<App> & {
  value: Value
}

export type TAction<App extends BaseApp, Value> = (
  context: TContext<App, Value>
) => any

export type TOperator<C, RC> = (
  err: Error,
  val: C,
  next: (err: Error, val?: RC) => void,
  final?: (err, Error, val?: RC) => void
) => void

export type TDerive<App extends BaseApp, Value, Parent = any> = (
  state: App['state'],
  parent: Parent
) => Value

export type TReaction<App extends BaseApp> = (
  reaction: (
    getState: (state: App['state']) => any,
    action: TAction<App, void>
  ) => any
) => any
