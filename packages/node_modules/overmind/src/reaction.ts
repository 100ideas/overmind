import { EventEmitter } from 'betsy'
import ProxyStateTree from 'proxy-state-tree'
import { Events, EventType } from './internalTypes'

class Reaction {
  private proxyStateTreeListener: any = null
  private updateCount: number = 0
  private statePath: string
  constructor(
    private eventHub: EventEmitter<Events>,
    private proxyStateTree: ProxyStateTree,
    private path: string
  ) {}
  create(stateCb: (state: object) => any, cb: any) {
    const trackId = this.proxyStateTree.startPathsTracking()
    stateCb(this.proxyStateTree.get())
    this.statePath = Array.from(
      this.proxyStateTree.clearPathsTracking(trackId)
    )[0]

    this.proxyStateTreeListener = this.proxyStateTree.addFlushListener(
      (mutations, flushId) => {
        for (let mutationIndex in mutations) {
          const mutation = mutations[mutationIndex]
          if (mutation.path.indexOf(this.statePath) === 0) {
            this.eventHub.emitAsync(EventType.REACTION_UPDATE, {
              path: this.path,
              statePath: this.statePath,
              updateCount: ++this.updateCount,
              flushId,
            })
            cb()
          }
        }
      }
    )

    this.eventHub.emitAsync(EventType.REACTION_ADD, {
      path: this.path,
      statePath: this.statePath,
      updateCount: this.updateCount,
    })
  }
  destroy() {
    this.eventHub.emitAsync(EventType.REACTION_REMOVE, {
      path: this.path,
      statePath: this.statePath,
      updateCount: this.updateCount,
    })
    this.proxyStateTreeListener.dispose()
  }
}

export default Reaction
