import App, { TAction, TConfig } from './'

describe('Overmind', () => {
  test('should instantiate app with state', () => {
    const app = new App({
      state: {
        foo: 'bar',
      },
      actions: {},
      effects: {},
    })

    expect(app.state.foo).toEqual('bar')
  })
  test('should instantiate app with actions', () => {})
  test('should instantiate app with namespaces', () => {
    const fooAction: Action<string> = (action) => action()

    const foo = {
      state: {
        foo: 'bar',
      },
      actions: {
        foo: fooAction,
      },
    }
    const bar = {
      state: {
        bar: 'baz',
      },
      effects: {
        hello: () => 'hello',
      },
      actions: {
        bar: fooAction,
      },
    }

    type Config = TConfig<{
      modules: {
        foo: typeof foo
        bar: typeof bar
      }
    }>

    type Action<Input = void, Output = any> = TAction<Input, Output, Config>

    const config = {
      modules: {
        foo,
        bar,
      },
    }

    const app = new App(config)

    expect(app.state.foo.foo).toEqual('bar')
    expect(app.state.bar.bar).toEqual('baz')
    expect(app.actions.foo.foo('mip')).toEqual('mip')
    expect(app.actions.bar.bar('bop')).toEqual('bop')
  })
  /*
  test('should allow namespaced modules to be functions', () => {
    const fooNamespace = (namespace: string) => {
      type Action<InitialValue = void> = TAction<InitialValue, Namespace>
      type Map<InValue = void, OutValue = InValue> = TOperation.Map<
        InValue,
        OutValue,
        Namespace
      >

      type State = {
        foo: string
      }

      const state: State = {
        foo: 'bar',
      }

      const effects = {
        hello: () => 'hello',
      }

      const mapFoo: Map<string> = ({ state }, value) =>
        value + (state[namespace] as State).foo

      const foo: Action<string> = (action) => action<string>().map(mapFoo)

      return {
        state,
        actions: {
          foo,
        },
        effects,
      }
    }

    const config = namespaces({
      foo: fooNamespace,
    })

    const app = new App(config)

    expect(app.state.foo.foo).toEqual('bar')
    expect(app.actions.foo.foo('mip')).toEqual('mipbar')
  })
  */
})

describe('OPERATORS', () => {
  test('fork', () => {
    expect.assertions(2)
    let calledFoo = false
    const doThis: Action = (action) =>
      action().fork(() => 'foo', {
        foo: (action) =>
          action()
            .do(() => (calledFoo = true))
            .map(() => '123'),
        bar: action().map(() => 123),
      })
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>

    const app = new App(config)

    expect(app.actions.doThis()).toBe(undefined)
    expect(calledFoo).toBe(true)
  })
  test('mutate', () => {
    const doThis: Action = (action) =>
      action().mutate((state) => (state.foo = 'bar2'))
    const config = {
      state: {
        foo: 'bar',
      },
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      state: {
        foo: string
      }
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>

    const app = new App(config)

    expect(app.state.foo).toEqual('bar')
    app.actions.doThis()
    expect(app.state.foo).toEqual('bar2')
  })
  test('do', () => {
    expect.assertions(2)
    const doThis: Action<string> = (action) =>
      action().do(({ foo }) => {
        expect(foo.bar()).toBe('baz')
      })
    const config = {
      state: {
        foo: 'bar',
      },
      effects: {
        foo: {
          bar: () => 'baz',
        },
      },
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      state: {
        foo: string
      }
      effects: {
        foo: typeof config.effects.foo
      }
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>

    const app = new App(config)
    expect(app.actions.doThis('foo')).toBe('foo')
  })
  test('map', () => {
    expect.assertions(1)
    const doThis: Action<string> = (action) =>
      action().map((_, value) => {
        return value.toUpperCase()
      })
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>

    const app = new App(config)

    expect(app.actions.doThis('foo')).toBe('FOO')
  })

  test('try - resolved', () => {
    expect.assertions(1)
    const doThis: Action = (action) =>
      action().try(() => Promise.resolve(), {
        success: (action) => action().map(() => 'foo'),
        error: (action) => action().map(() => 'error'),
      })
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>
    const app = new App(config)

    return Promise.resolve(app.actions.doThis()).then((value) => {
      expect(value).toBe('foo')
    })
  })

  test('try - rejected', () => {
    expect.assertions(1)
    const doThis: Action = (action) =>
      action().try(() => Promise.reject(new Error()), {
        success: (action) => action().map(() => 'foo'),
        error: (action) => action().map(() => 'bar'),
      })
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>
    const app = new App(config)
    return Promise.resolve(app.actions.doThis()).then((value) => {
      expect(value).toBe('bar')
    })
  })
  test('when - true', () => {
    expect.assertions(1)
    const doThis: Action = (action) =>
      action().when(() => true, {
        true: (action) => action().map(() => 'foo'),
        false: (action) => action(),
      })
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>
    const app = new App(config)
    expect(app.actions.doThis()).toBe('foo')
  })

  test('when - false', () => {
    expect.assertions(1)
    const doThis: Action = (action) =>
      action().when(() => false, {
        true: (action) => action().map(() => 'foo'),
        false: (action) => action().map(() => 'bar'),
      })
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>
    const app = new App(config)

    expect(app.actions.doThis()).toBe('bar')
  })

  test('filter - true', () => {
    expect.assertions(1)
    const doThis: Action<string> = (action) =>
      action()
        .filter(() => true)
        .map(() => 'bar')
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>
    const app = new App(config)
    expect(app.actions.doThis('foo')).toBe('bar')
  })
  test('filter - false', () => {
    expect.assertions(1)
    const doThis: Action<string> = (action) =>
      action()
        .filter(() => false)
        .map(() => 'bar')
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>
    const app = new App(config)

    expect(app.actions.doThis('foo')).toEqual({ value: 'foo' })
  })
  test('debounce', () => {
    expect.assertions(2)
    const start = Date.now()
    let end
    const doThis: Action = (action) =>
      action()
        .debounce(100)
        .do(() => {
          end = Date.now()
        })
        .map(() => 'foo')
    const config = {
      actions: {
        doThis,
      },
    }
    type Config = TConfig<{
      actions: typeof config.actions
    }>
    type Action<Input = void, Output = any> = TAction<Input, Output, Config>
    const app = new App(config)

    return Promise.resolve(app.actions.doThis()).then((value) => {
      expect(value).toBe('foo')
      expect(end - start).toBeGreaterThanOrEqual(100)
    })
  })
})
