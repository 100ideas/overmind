import App, { namespaces, Namespace, TAction, TOperation, TModules } from './'
describe('Overmind', () => {
  test('should instantiate app with state', () => {
    const app = new App({
      state: {
        foo: 'bar',
      },
    })
    expect(app.state.foo).toEqual('bar')
  })
  test('should instantiate app with actions', () => {
    const app = new App({
      state: {},
      effects: {},
      actions: {
        foo: (action) => action<string>(),
      },
    })
    expect(app.actions.foo('bah')).toEqual('bah')
  })
  test('should instantiate app with namespaces', () => {
    const fooAction: Action<string> = (action) => action<string>()

    const foo = {
      state: {
        foo: 'bar',
      },
      actions: {
        foo: fooAction,
      },
    }
    const bar = {
      state: {
        bar: 'baz',
      },
      actions: {
        bar: fooAction,
      },
    }

    type Modules = TModules<{
      foo: typeof foo
      bar: typeof bar
    }>
    type Action<Value = void> = TAction<Value, Modules>

    const app = new App(
      namespaces({
        foo,
        bar,
      })
    )

    expect(app.state.foo.foo).toEqual('bar')
    expect(app.state.bar.bar).toEqual('baz')
    expect(app.actions.foo.foo('mip')).toEqual('mip')
    expect(app.actions.bar.bar('bop')).toEqual('bop')
  })
  test('should allow namespaced modules to be functions', () => {
    const fooNamespace = (namespace: string) => {
      type Action<InitialValue = void> = TAction<InitialValue, Namespace>
      type Map<InValue = void, OutValue = InValue> = TOperation.Map<
        InValue,
        OutValue,
        Namespace
      >

      type State = {
        foo: string
      }

      const state: State = {
        foo: 'bar',
      }

      const effects = {
        hello: () => 'hello',
      }

      const mapFoo: Map<string> = ({ state }, value) =>
        value + (state[namespace] as State).foo

      const foo: Action<string> = (action) => action<string>().map(mapFoo)

      return {
        state,
        actions: {
          foo,
        },
        effects,
      }
    }

    const config = namespaces({
      foo: fooNamespace,
    })

    const app = new App(config)

    expect(app.state.foo.foo).toEqual('bar')
    expect(app.actions.foo.foo('mip')).toEqual('mipbar')
  })
})

describe('OPERATORS', () => {
  test('fork', () => {
    expect.assertions(2)
    let calledFoo = false
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<void>().fork(() => 'foo', {
            foo: action()
              .do(() => (calledFoo = true))
              .map(() => '123'),
            bar: action().map(() => 123),
          }),
      },
    })
    expect(app.actions.doThis()).toBe(undefined)
    expect(calledFoo).toBe(true)
  })
  test('mutate', () => {
    const app = new App({
      state: {
        foo: 'bar',
      },
      actions: {
        doThis: (action) =>
          action<void>().mutation((state) => (state.foo = 'bar2')),
      },
    })

    expect(app.state.foo).toEqual('bar')
    app.actions.doThis()
    expect(app.state.foo).toEqual('bar2')
  })
  test('do', () => {
    expect.assertions(2)
    const app = new App({
      state: {
        foo: 'bar',
      },
      effects: {
        foo: {
          bar: () => 'baz',
        },
      },
      actions: {
        doThis: (action) =>
          action<string>().do(({ foo }) => {
            expect(foo.bar()).toBe('baz')
          }),
      },
    })
    expect(app.actions.doThis('foo')).toBe('foo')
  })
  test('map', () => {
    expect.assertions(1)
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<string>().map((_, value) => {
            return value.toUpperCase()
          }),
      },
    })

    expect(app.actions.doThis('foo')).toBe('FOO')
  })

  test('try - resolved', () => {
    expect.assertions(1)
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<void>().try(() => Promise.resolve(), {
            success: action<void>().map(() => 'foo'),
            error: action<void>().map(() => 'error'),
          }),
      },
    })

    return Promise.resolve(app.actions.doThis()).then((value) => {
      expect(value).toBe('foo')
    })
  })

  test('try - rejected', () => {
    expect.assertions(1)
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<void>().try(() => Promise.reject(new Error()), {
            success: action().map(() => 'foo'),
            error: action().map(() => 'bar'),
          }),
      },
    })
    return Promise.resolve(app.actions.doThis()).then((value) => {
      expect(value).toBe('bar')
    })
  })
  test('when - true', () => {
    expect.assertions(1)
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<void>().when(() => true, {
            true: action<void>().map(() => 'foo'),
            false: action<void>(),
          }),
      },
    })
    expect(app.actions.doThis()).toBe('foo')
  })

  test('when - false', () => {
    expect.assertions(1)
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<void>().when(() => false, {
            true: action<void>().map(() => 'foo'),
            false: action<void>().map(() => 'bar'),
          }),
      },
    })

    expect(app.actions.doThis()).toBe('bar')
  })

  test('filter - true', () => {
    expect.assertions(1)
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<string>()
            .filter(() => true)
            .map(() => 'bar'),
      },
    })
    expect(app.actions.doThis('foo')).toBe('bar')
  })
  test('filter - false', () => {
    expect.assertions(1)
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<string>()
            .filter(() => false)
            .map(() => 'bar'),
      },
    })

    expect(app.actions.doThis('foo')).toEqual({ value: 'foo' })
  })
  test('debounce', () => {
    expect.assertions(2)
    const start = Date.now()
    let end
    const app = new App({
      state: {},
      actions: {
        doThis: (action) =>
          action<void>()
            .debounce(100)
            .do(() => {
              end = Date.now()
            })
            .map(() => 'foo'),
      },
    })

    return Promise.resolve(app.actions.doThis()).then((value) => {
      expect(value).toBe('foo')
      expect(end - start).toBeGreaterThanOrEqual(100)
    })
  })
})
