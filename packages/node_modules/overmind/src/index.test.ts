import { Overmind, TAction, TApp, EventType } from './'
import { modules } from './modules'

function toJSON(obj) {
  return JSON.parse(JSON.stringify(obj))
}

function createDefaultApp() {
  const state = {
    foo: 'bar',
  }
  const changeFoo: Action = (context) => {
    context.state.foo = 'bar2'
  }
  const changeFooWithEffect: Action = (context) => {
    context.state.foo = context.hello()
  }
  const waitAndChangeFoo: Action = (context) => {
    return context.wait().then(() => {
      context.state.foo = 'bar2'
    })
  }
  const asyncChangeFoo: Action = async (context) => {
    await Promise.resolve()
    context.state.foo = 'bar2'
  }
  const actions = {
    changeFoo,
    changeFooWithEffect,
    waitAndChangeFoo,
    asyncChangeFoo,
  }
  const effects = {
    hello() {
      return 'hello'
    },
    wait() {
      return Promise.resolve()
    },
  }
  const config = {
    state,
    actions,
    effects,
  }

  type App = TApp<{
    state: typeof state
    actions: typeof actions
    effects: typeof effects
  }>
  type Action<Value = void, ReturnValue = Value> = TAction<
    App,
    Value,
    ReturnValue
  >

  return new Overmind(config)
}

describe('Overmind', () => {
  test('should instantiate app with state', () => {
    const app = new Overmind({
      state: {
        foo: 'bar',
      },
    })

    expect(app.state.foo).toEqual('bar')
  })

  test('should instantiate app with onInitialize', () => {
    expect.assertions(2)
    const app = new Overmind({
      onInitialize(context) {
        expect(context.state.foo).toBe('bar')
        expect(typeof context.value.doThis === 'function').toBe(true)
      },
      state: {
        foo: 'bar',
      },
      actions: {
        doThis() {},
      },
    })

    return app.initialized
  })
  test('should be able to type actions', () => {
    expect.assertions(2)

    const app = createDefaultApp()

    expect(app.state.foo).toBe('bar')
    app.actions.changeFoo()
    expect(app.state.foo).toBe('bar2')
  })
  test('should allow changing state in actions', () => {
    expect.assertions(2)
    const app = createDefaultApp()

    expect(app.state.foo).toBe('bar')
    app.actions.changeFoo()
    expect(app.state.foo).toBe('bar2')
  })
  test('should expose effects to actions', () => {
    expect.assertions(2)
    const app = createDefaultApp()

    expect(app.state.foo).toBe('bar')
    app.actions.changeFooWithEffect()
    expect(app.state.foo).toBe('hello')
  })
  test('should be able to do mutations async via effects', () => {
    expect.assertions(2)
    const app = createDefaultApp()
    expect(app.state.foo).toBe('bar')
    return app.actions.waitAndChangeFoo().then(() => {
      expect(app.state.foo).toBe('bar2')
    })
  })
  test('should track action start and end', () => {
    expect.assertions(2)
    const app = new Overmind({
      actions: {
        doThis() {},
      },
    })
    app.eventHub.once(EventType.ACTION_START, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        actionName: 'doThis',
        executionId: 0,
        operatorId: 0,
        path: [],
      })
    })
    app.eventHub.once(EventType.ACTION_END, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        executionId: 0,
        actionName: 'doThis',
        operatorId: 0,
        path: [],
      })
    })
    app.actions.doThis()
  })
  test('should track operator start and end', () => {
    expect.assertions(2)
    const app = new Overmind({
      actions: {
        doThis() {},
      },
    })
    app.eventHub.once(EventType.OPERATOR_START, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        actionName: 'doThis',
        type: 'action',
        path: [],
        executionId: 0,
        operatorId: 0,
      })
    })
    app.eventHub.once(EventType.OPERATOR_END, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        actionName: 'doThis',
        type: 'action',
        path: [],
        isAsync: false,
        executionId: 0,
        operatorId: 0,
      })
    })
    app.actions.doThis()
  })
  test('should track mutations', () => {
    expect.assertions(1)
    const app = createDefaultApp()
    app.eventHub.once(EventType.MUTATIONS, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 0,
        actionName: 'changeFoo',
        mutations: [
          {
            args: ['bar2'],
            method: 'set',
            path: 'foo',
          },
        ],
        executionId: 0,
        operatorId: 0,
        path: [],
      })
    })
    app.actions.changeFoo()
  })
  test('should track async mutations', () => {
    expect.assertions(1)
    const app = createDefaultApp()
    app.eventHub.on(EventType.MUTATIONS, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 2,
        actionName: 'waitAndChangeFoo',
        mutations: [
          {
            args: ['bar2'],
            method: 'set',
            path: 'foo',
          },
        ],
        executionId: 0,
        operatorId: 0,
        path: [],
      })
    })
    app.actions.waitAndChangeFoo()
  })
  test('should track async mutations with async await', () => {
    expect.assertions(1)
    const app = createDefaultApp()
    app.eventHub.on(EventType.MUTATIONS, (data) => {
      expect(toJSON(data)).toEqual({
        actionId: 3,
        actionName: 'asyncChangeFoo',
        mutations: [
          {
            args: ['bar2'],
            method: 'set',
            path: 'foo',
          },
        ],
        executionId: 0,
        operatorId: 0,
        path: [],
      })
    })
    app.actions.asyncChangeFoo()
  })
  test('should instantiate app with modules', () => {
    const foo = {
      state: {
        foo: 'bar',
      },
      actions: {
        foo() {},
      },
    }
    const bar = {
      state: {
        bar: 'baz',
      },
      effects: {
        hello: () => 'hello',
      },
      actions: {
        bar() {},
      },
    }

    const config = Object.assign(
      {},
      modules({
        foo,
        bar,
      })
    )

    const app = new Overmind(config)

    expect(app.state.foo.foo).toEqual('bar')
    expect(app.state.bar.bar).toEqual('baz')
    expect(typeof app.actions.foo.foo).toBe('function')
    expect(typeof app.actions.bar.bar).toBe('function')
  })
  test('should instantiate modules with onInitialize', () => {
    const result = []
    const app = new Overmind(
      modules({
        foo: {
          onInitialize: () => {
            result.push('foo')
          },
        },
        bar: {
          onInitialize: () => {
            result.push('bar')
          },
        },
      })
    )

    return app.initialized.then(() => {
      expect(result).toEqual(['foo', 'bar'])
    })
  })
})
