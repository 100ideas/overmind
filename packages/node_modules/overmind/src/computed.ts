import { EventEmitter } from 'betsy'
import ProxyStateTree from 'proxy-state-tree'
import { Events } from './'

type ComputedOptions = {
  cacheLimit?: number
}

type Cache = {
  isDirty: boolean
  proxyStateTreeListener: any
  value: any
  paths: Set<string>
  updateCount: number
}

export class Computed {
  cb: (config: any) => (state: object) => void
  cacheLimit: number = 10
  cacheKeys: Cache[] = []
  cache: Map<any, Cache> = new Map()
  constructor(cb, options: ComputedOptions = {}) {
    this.cb = cb
    this.cacheLimit = options.cacheLimit || this.cacheLimit
    return this.evaluate.bind(this)
  }
  evaluate(
    eventHub: EventEmitter<Events>,
    proxyStateTree: ProxyStateTree,
    path
  ) {
    return (config) => {
      let cache = this.cache.get(config)

      if (!cache) {
        cache = {
          isDirty: true,
          proxyStateTreeListener: null,
          value: undefined,
          paths: new Set<string>(),
          updateCount: 0,
        }
        this.cache.set(config, cache)
        this.cacheKeys.push(config)
        if (this.cacheKeys.length > this.cacheLimit) {
          const cacheKey = this.cacheKeys.shift()
          this.cache.get(cacheKey).proxyStateTreeListener.dispose()
          this.cache.delete(cacheKey)
        }
      }

      if (cache && cache.isDirty) {
        const trackId = proxyStateTree.startPathsTracking()
        cache.value = this.cb(config)(proxyStateTree.get())
        cache.isDirty = false
        cache.paths = proxyStateTree.clearPathsTracking(trackId)
        if (cache.proxyStateTreeListener) {
          cache.proxyStateTreeListener.update(cache.paths)
        } else {
          eventHub.emit('computed', {
            path,
            paths: Array.from(cache.paths),
            updateCount: cache.updateCount,
            value: cache.value,
            limit: this.cacheLimit,
            cacheKeysCount: this.cacheKeys.length,
            cacheKeyIndex: this.cacheKeys.indexOf(config),
          })
          cache.proxyStateTreeListener = proxyStateTree.addMutationListener(
            cache.paths,
            (flushId) => {
              eventHub.emit('computed', {
                path,
                paths: Array.from(cache.paths),
                updateCount: cache.updateCount,
                value: cache.value,
                limit: this.cacheLimit,
                cacheKeysCount: this.cacheKeys.length,
                cacheKeyIndex: this.cacheKeys.indexOf(config),
                flushId,
              })
              cache.isDirty = true
            }
          )
        }
        cache.updateCount++

        // Tracks the paths for the consumer of this derived value
        for (let path of cache.paths) {
          proxyStateTree.addTrackingPath(path)
        }

        return cache.value
      } else if (cache) {
        return cache.value
      }
    }
  }
}

export default function computed<Config, NewValue>(
  cb: (config: Config) => (state: object) => NewValue,
  options?: ComputedOptions
): (config: Config) => NewValue {
  return new Computed(cb, options) as any
}
