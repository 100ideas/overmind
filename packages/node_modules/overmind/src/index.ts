import { actionChainFactory } from 'action-chain'
import ProxyStateTree from 'proxy-state-tree'
import Devtools, { Message, safeValue } from './Devtools'
import createActionFactory, {
  Action,
  NoValueAction,
} from './createActionFactory'
export { default as compose } from './compose'

type Configuration<State, Providers, Actions> = {
  state?: State
  providers?: Providers
  actions?: Actions
}

type Options = {
  devtools?: string
}

export type ActionsCallback<Providers, State> = (
  action: IAction<State, Providers & { state: State }>
) => any

export type TContext<State, Providers = {}> = Providers & {
  state: State
}

export interface IAction<State, Context> {
  <InitialValue = undefined>(): InitialValue extends undefined
    ? NoValueAction<State, Context, InitialValue>
    : Action<State, Context, InitialValue>
}

export default class App<
  State extends object,
  Providers extends object,
  Actions extends
    | {
        [namespace: string]: ActionsCallback<Providers, State>
      }
    | ActionsCallback<Providers, State>
> {
  private proxyStateTree: ProxyStateTree
  devtools: Devtools
  actions: Actions extends {
    [namespace: string]: ActionsCallback<Providers, State>
  }
    ? { [Namespace in keyof Actions]: ReturnType<Actions[Namespace]> }
    : Actions extends ActionsCallback<Providers, State>
      ? ReturnType<Actions>
      : any
  state: State
  constructor(
    configuration: Configuration<State, Providers, Actions>,
    options: Options = {}
  ) {
    const proxyStateTree = new ProxyStateTree(configuration.state || {})
    const actionChain = actionChainFactory(
      Object.assign(
        {
          state: proxyStateTree.get(),
        },
        configuration.providers || ({} as Providers)
      ),
      {
        providerExceptions: ['state'],
      }
    )
    const actionFactory = createActionFactory<
      State,
      Providers & { state: State }
    >(proxyStateTree)
    const action = function<InitialValue>(): InitialValue extends undefined
      ? NoValueAction<State, Providers & { state: State }, InitialValue>
      : Action<State, Providers & { state: State }, InitialValue> {
      return actionFactory<InitialValue>(actionChain)
    }

    actionChain.on('operator:async', () => {
      const mutations = proxyStateTree.flush()
      if (this.devtools) {
        this.devtools.send({
          type: 'flush',
          data: { mutations },
        })
      }
    })
    actionChain.on('action:end', () => {
      const mutations = proxyStateTree.flush()
      if (this.devtools) {
        this.devtools.send({
          type: 'flush',
          data: { mutations },
        })
      }
    })

    this.state = proxyStateTree.get()
    this.actions =
      typeof configuration.actions === 'function'
        ? (configuration.actions as ActionsCallback<Providers, State>)(
            action as IAction<State, Providers & { state: State }>
          )
        : (Object.keys(configuration.actions || {}).reduce(
            (aggr, namespace) =>
              Object.assign(aggr, {
                [namespace]: configuration.actions[namespace](action as IAction<
                  State,
                  Providers & { state: State }
                >),
              }),
            {}
          ) as any)
    this.proxyStateTree = proxyStateTree

    if (options.devtools && typeof window !== 'undefined') {
      this.initializeDevtools(options.devtools, actionChain)
    }
  }
  private initializeDevtools(host, actionChain) {
    const devtools = new Devtools()
    devtools.connect(
      host,
      (message: Message) => {
        // To use for communication from devtools app
      }
    )
    devtools.send({
      type: 'init',
      data: {
        state: this.proxyStateTree.get(),
      },
    })
    actionChain.on('action:start', (data) =>
      devtools.send({
        type: 'action:start',
        data,
      })
    )
    actionChain.on('operator:start', (data) =>
      devtools.send({
        type: 'operator:start',
        data,
      })
    )
    actionChain.on('operator:end', (data) =>
      devtools.send({
        type: 'operator:end',
        data: {
          ...data,
          result: safeValue(data.result),
        },
      })
    )
    actionChain.on('action:end', (data) =>
      devtools.send({
        type: 'action:end',
        data,
      })
    )
    actionChain.on('provider', (data) =>
      devtools.send({
        type: 'provider',
        data,
      })
    )
    actionChain.on('mutations', (data) =>
      devtools.send({
        type: 'mutations',
        data,
      })
    )
    this.devtools = devtools
  }
  trackState() {
    return this.proxyStateTree.startPathsTracking()
  }
  clearTrackState(id: number) {
    return this.proxyStateTree.clearPathsTracking(id)
  }
  addMutationListener(name, paths, cb) {
    return this.proxyStateTree.addMutationListener(paths, cb)
  }
}
