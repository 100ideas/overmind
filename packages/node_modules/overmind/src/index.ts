import { EventEmitter } from 'betsy'
import isPlainObject from 'is-plain-obj'
import {
  IS_PROXY,
  ProxyStateTree,
  TTree,
  IMutation,
  VALUE,
  IMutationCallback,
} from 'proxy-state-tree'
import { Derived } from './derived'
import { Devtools, Message, safeValue, safeValues } from './Devtools'
import {
  Events,
  EventType,
  Options,
  ResolveActions,
  ResolveState,
} from './internalTypes'
import { proxifyEffects } from './proxyfyEffects'
import {
  Configuration,
  TAction,
  TConfig,
  TDerive,
  TOperator,
  TValueContext,
  TOnInitialize,
  TStateObject,
} from './types'

export * from './types'

/** This type can be overwriten by app developers if they want to avoid
 * typing and then they can import `Action`,  `Operation` etc. directly from
 * overmind.
 */
export interface IConfig {}

type TheConfig = IConfig & TConfig<{ actions: {} }>

export type Action<Value = void> = TAction<TheConfig, Value>

export type Derive<Parent extends TStateObject, Value> = TDerive<
  TheConfig,
  Parent,
  Value
>

export type OnInitialize = TOnInitialize<TheConfig>

const IS_PRODUCTION = process.env.NODE_ENV === 'production'
const IS_DEVELOPMENT = process.env.NODE_ENV === 'development'
const IS_OPERATOR = Symbol('operator')

export const makeStringifySafeMutations = (mutations: IMutation[]) => {
  return mutations.map((mutation) => ({
    ...mutation,
    args: safeValues(mutation.args),
  }))
}

const hotReloadingCache = {}

// We do not use TConfig<Config> directly to type the class in order to avoid
// the 'import(...)' function to be used in exported types.

export class Overmind<Config extends Configuration> implements Configuration {
  private proxyStateTree: ProxyStateTree<object>
  private actionReferences: Function[] = []
  private nextExecutionId: number = 0
  initialized: Promise<any>
  eventHub: EventEmitter<Events>
  devtools: Devtools
  actions: ResolveActions<Config['actions']>
  state: ResolveState<Config['state']>
  effects: Config['effects'] & {}
  constructor(configuration: Config, options: Options = {}) {
    const name = options.name || 'MyConfig'

    if (IS_DEVELOPMENT) {
      if (hotReloadingCache[name]) {
        return hotReloadingCache[name]
      } else {
        hotReloadingCache[name] = this
      }
    }

    /*
      Set up an eventHub to trigger information from derived, computed and reactions
    */
    const eventHub = new EventEmitter<Events>()

    /*
      Create the proxy state tree instance with the state and a wrapper to expose
      the eventHub
    */
    const proxyStateTree = new ProxyStateTree(
      this.getState(configuration) as any,
      {
        devmode: !IS_PRODUCTION,
        dynamicWrapper: (_, path, func) => func(eventHub, proxyStateTree, path),
      }
    )

    this.state = proxyStateTree.state
    this.effects = configuration.effects || {}
    this.proxyStateTree = proxyStateTree
    this.eventHub = eventHub

    /*
      The action factory function
    */

    if (!IS_PRODUCTION && typeof window !== 'undefined') {
      let warning = 'OVERMIND: You are running in DEVELOPMENT mode.'
      if (options.logProxies !== true) {
        const originalConsoleLog = console.log

        console.log = (...args) =>
          originalConsoleLog.apply(
            console,
            args.map((arg) => (arg && arg[IS_PROXY] ? arg[VALUE] : arg))
          )
        warning +=
          '\n\n - To improve debugging experience "console.log" will NOT log proxies from Overmind, but the actual value. Please see docs to turn off this behaviour'
      }

      if (
        options.devtools ||
        (location.hostname === 'localhost' && options.devtools !== false)
      ) {
        this.initializeDevtools(options.devtools, eventHub, proxyStateTree)
      } else {
        warning +=
          '\n\n - You are not running on localhost. You will have to manually define the devtools option to connect'
      }

      console.warn(warning)
    }

    eventHub.on(EventType.OPERATOR_ASYNC, (data) => {
      const flushData = proxyStateTree.flush(true)
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
            mutations: makeStringifySafeMutations(flushData.mutations),
          },
        })
      }
    })
    eventHub.on(EventType.ACTION_END, (data) => {
      const flushData = proxyStateTree.flush()
      if (this.devtools && flushData.mutations.length) {
        this.devtools.send({
          type: 'flush',
          data: {
            ...data,
            ...flushData,
            mutations: makeStringifySafeMutations(flushData.mutations),
          },
        })
      }
    })

    /*
      Expose the created actions
    */
    this.actions = this.getActions(configuration)

    if (configuration.onInitialize) {
      const onInitialize = this.createAction(
        'onInitialize',
        configuration.onInitialize
      )

      this.initialized = Promise.resolve(onInitialize(this))
    } else {
      this.initialized = Promise.resolve(null)
    }

    if (IS_PRODUCTION) {
      let nextTick
      const flushTree = () => {
        proxyStateTree.flush(true)
      }

      this.proxyStateTree.onMutation(() => {
        nextTick && clearTimeout(nextTick)
        nextTick = setTimeout(flushTree, 0)
      })
    }
  }
  private createExecution(name, action) {
    return {
      actionId: this.actionReferences.indexOf(action),
      executionId: this.nextExecutionId++,
      actionName: name,
      operatorId: 0,
      path: [],
      emit: this.eventHub.emit.bind(this.eventHub),
      send: this.devtools ? this.devtools.send.bind(this.devtools) : () => {},
      trackEffects: this.trackEffects.bind(this, this.effects),
    }
  }
  private createContext(value, execution, tree) {
    return Object.assign(
      {
        value,
        state: tree.state,
        execution,
        proxyStateTree: this.proxyStateTree,
      },
      this.trackEffects(this.effects, execution)
    )
  }
  private scopeValue(value: any, tree: TTree) {
    if (!value) {
      return value
    }
    if (value[IS_PROXY]) {
      return this.proxyStateTree.rescope(value, tree)
    } else if (isPlainObject(value)) {
      return Object.assign(
        {},
        ...Object.keys(value).map((key) => ({
          [key]: this.proxyStateTree.rescope(value[key], tree),
        }))
      )
    } else {
      return value
    }
  }
  private createAction(name, action) {
    this.actionReferences.push(action)
    return (value?) => {
      if (IS_PRODUCTION || action[IS_OPERATOR]) {
        return new Promise((resolve, reject) => {
          const execution = this.createExecution(name, action)
          this.eventHub.emit(EventType.ACTION_START, execution)

          action[IS_OPERATOR]
            ? action(
                null,
                Object.assign(
                  {
                    value,
                    state: this.proxyStateTree.state,
                    execution,
                    proxyStateTree: this.proxyStateTree,
                  },
                  this.trackEffects(this.effects, execution)
                ),
                (err, finalContext) => {
                  this.eventHub.emit(EventType.ACTION_END, {
                    ...finalContext.execution,
                    operatorId: finalContext.execution.operatorId - 1,
                  })
                  if (err) reject(err)
                  else resolve(finalContext.value)
                }
              )
            : action(
                this.createContext(
                  value,
                  execution,
                  this.proxyStateTree.getMutationTree()
                )
              )
        })
      } else {
        const execution = {
          ...this.createExecution(name, action),
          operatorId: 0,
          type: 'action',
        }
        this.eventHub.emit(EventType.ACTION_START, execution)
        this.eventHub.emit(EventType.OPERATOR_START, execution)

        const mutationTree = this.proxyStateTree.getMutationTree()

        mutationTree.onMutation((mutation) => {
          this.eventHub.emit(EventType.MUTATIONS, {
            ...execution,
            mutations: makeStringifySafeMutations([mutation]),
          })
          setTimeout(() => {
            const flushData = this.proxyStateTree.flush(true)
            if (flushData.mutations.length) {
              this.devtools.send({
                type: 'flush',
                data: {
                  ...execution,
                  ...flushData,
                  mutations: makeStringifySafeMutations(flushData.mutations),
                },
              })
            }
          })
        })

        const result = action(
          this.createContext(
            this.scopeValue(value, mutationTree),
            execution,
            mutationTree
          )
        )
        this.eventHub.emit(EventType.OPERATOR_END, {
          ...execution,
          isAsync: result instanceof Promise,
          result: undefined,
        })
        this.eventHub.emit(EventType.ACTION_END, execution)

        const flushData = this.proxyStateTree.flush()
        if (this.devtools && flushData.mutations.length) {
          this.devtools.send({
            type: 'flush',
            data: {
              ...execution,
              ...flushData,
            },
          })
        }
        return Promise.resolve(result)
      }
    }
  }
  private trackEffects(effects = {}, execution) {
    if (IS_PRODUCTION) {
      return effects
    }

    return proxifyEffects(this.effects, (effect) =>
      this.eventHub.emitAsync(EventType.EFFECT, { ...execution, ...effect })
    )
  }
  private initializeDevtools(host, eventHub, proxyStateTree) {
    const devtools = new Devtools(
      typeof document === 'undefined' ? 'NoName' : document.title || 'NoName'
    )
    devtools.connect(
      host,
      (message: Message) => {
        // To use for communication from devtools app
      }
    )
    for (let type in EventType) {
      eventHub.on(EventType[type], (data) =>
        devtools.send({
          type: EventType[type],
          data,
        })
      )
    }
    // This message is always the first as it is passed synchronously, all other
    // events are emitted async
    devtools.send({
      type: 'init',
      data: {
        state: proxyStateTree.sourceState,
      },
    })
    this.devtools = devtools
  }
  private getState(configuration: Configuration) {
    let state = {}
    if (configuration.state) {
      state = this.processState(configuration.state)
    }

    return state
  }
  private processState(state: {}) {
    return Object.keys(state).reduce((aggr, key) => {
      if (key === '__esModule') {
        return aggr
      }

      const value = state[key]
      if (isPlainObject(value)) {
        aggr[key] = this.processState(value)
      } else if (typeof value === 'function') {
        aggr[key] = new Derived(value)
      } else {
        aggr[key] = value
      }

      return aggr
    }, {})
  }
  private getActions(configuration: Configuration) {
    let actions = {}
    if (configuration.actions) {
      actions = configuration.actions
    }

    const evaluatedActions = Object.keys(actions).reduce((aggr, name) => {
      if (typeof actions[name] === 'function') {
        return Object.assign(aggr, {
          [name]: this.createAction(name, actions[name]),
        })
      }

      return Object.assign(aggr, {
        [name]: Object.keys(actions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(
              aggr,
              typeof actions[name][subName] === 'function'
                ? {
                    [subName]: this.createAction(
                      subName,
                      actions[name][subName]
                    ),
                  }
                : {}
            ),
          {}
        ),
      })
    }, {}) as any

    if (this.devtools) {
      Object.keys(evaluatedActions).forEach((key) => {
        if (typeof evaluatedActions[key] === 'function') {
          evaluatedActions[key].displayName = key
        } else {
          Object.keys(evaluatedActions[key]).forEach((subKey) => {
            evaluatedActions[key][subKey].displayName = key + '.' + subKey
          })
        }
      })
    }

    return evaluatedActions
  }
  getTrackStateTree() {
    return this.proxyStateTree.getTrackStateTree()
  }
  getMutationTree() {
    return this.proxyStateTree.getMutationTree()
  }
  addMutationListener = (cb: IMutationCallback) => {
    return this.proxyStateTree.onMutation(cb)
  }
}

/*
  OPERATORS
  needs to be in this file for typing override to work
*/
export type Operator<Input, Output> = TOperator<TheConfig, Input, Output>

export function pipe<Config extends Configuration, A, B, C>(
  aOperator: TOperator<Config, A, B>
): TOperator<Config, A, C>

export function pipe<Config extends Configuration, A, B, C, D>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>
): TOperator<Config, A, D>

export function pipe<Config extends Configuration, A, B, C, D, E>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>
): TOperator<Config, A, E>

export function pipe<Config extends Configuration, A, B, C, D, E, F>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>,
  dOperator: TOperator<Config, D, E>
): TOperator<Config, A, F>

export function pipe<Config extends Configuration, A, B, C, D, E, F, G>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>,
  dOperator: TOperator<Config, D, E>,
  eOperator: TOperator<Config, E, F>
): TOperator<Config, A, G>

export function pipe<Config extends Configuration, A, B, C, D, E, F, G, H>(
  aOperator: TOperator<Config, A, B>,
  bOperator: TOperator<Config, B, C>,
  cOperator: TOperator<Config, C, D>,
  dOperator: TOperator<Config, D, E>,
  eOperator: TOperator<Config, E, F>,
  fOperator: TOperator<Config, F, G>
): TOperator<Config, A, H>

export function pipe(...operators) {
  const instance = (err, context, next, final = next) => {
    if (err) next(err)
    else {
      let operatorIndex = 0
      let asyncTimeout
      const finalClearingAsync = (...args) => {
        clearTimeout(asyncTimeout)
        final(...args)
      }
      const run = (runErr, runContext) => {
        asyncTimeout = setTimeout(() => {
          context.execution.emit(EventType.OPERATOR_ASYNC, {
            ...runContext.execution,
            isAsync: true,
          })
        })
        operators[operatorIndex++](
          runErr,
          runContext,
          runNextOperator,
          finalClearingAsync
        )
      }

      const runNextOperator = (operatorError, operatorContext) => {
        clearTimeout(asyncTimeout)
        if (operatorError) return next(operatorError)
        if (operatorIndex >= operators.length)
          return next(null, operatorContext)

        if (operatorContext.value instanceof Promise) {
          context.execution.emit(EventType.OPERATOR_ASYNC, {
            ...operatorContext.execution,
            isAsync: true,
          })
          operatorContext.value
            .then((promiseValue) =>
              run(null, { ...operatorContext, value: promiseValue })
            )
            .catch((promiseError) => next(promiseError, operatorContext))
        } else {
          try {
            run(null, operatorContext)
          } catch (operatorError) {
            next(operatorError, operatorContext)
          }
        }
      }

      runNextOperator(null, context)
    }
  }
  instance[IS_OPERATOR] = true
  return instance
}

/*
  OPERATORS
*/

function startDebugOperator(type, arg, context) {
  if (IS_PRODUCTION) {
    return
  }
  const name =
    typeof arg === 'function' ? arg.displayName || arg.name : arg.toString()

  context.execution.emit(EventType.OPERATOR_START, {
    ...context.execution,
    name,
    type,
  })
}

function stopDebugOperator(context, value) {
  if (IS_PRODUCTION) {
    return
  }

  if (value instanceof Promise) {
    value.then((promiseValue) => {
      context.execution.emit(EventType.OPERATOR_END, {
        ...context.execution,
        result: promiseValue,
        isAsync: true,
      })
    })
  } else {
    context.execution.emit(EventType.OPERATOR_END, {
      ...context.execution,
      result: value,
      isAsync: false,
    })
  }
}

function createContext(context, value, path?) {
  if (IS_PRODUCTION) {
    return {
      ...context,
      value,
    }
  }

  const newExecution = {
    ...context.execution,
    operatorId: context.execution.operatorId + 1,
    path: path || context.execution.path,
  }

  return Object.assign(
    {
      ...context,
      value,
      execution: newExecution,
    },
    context.execution.trackEffects(newExecution)
  )
}

function createNextPath(next) {
  if (IS_PRODUCTION) {
    return next
  }

  return (err, context) => {
    const newContext = {
      ...context,
      execution: {
        ...context.execution,
        path: context.execution.path.slice(
          0,
          context.execution.path.length - 1
        ),
      },
    }
    if (err) next(err, newContext)
    else next(null, newContext)
  }
}

export function map<Input, Output, Config extends Configuration = TheConfig>(
  operation: (input: TValueContext<Config, Input>) => Output
): TOperator<Config, Input, Output extends Promise<infer U> ? U : Output> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('map', operation, context)
      const value = operation(context)
      stopDebugOperator(context, value)
      next(null, createContext(context, value))
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function forEach<
  Input extends any[],
  Config extends Configuration = TheConfig
>(
  forEachItemOperator: TOperator<Config, Input[0], any>
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      let array = context.value
      let evaluatingCount = array.length
      let lastContext
      let hasErrored = false
      const evaluate = (err) => {
        if (hasErrored) {
          return
        }
        if (err) {
          hasErrored = true
          return next(err)
        }
        evaluatingCount--

        if (!evaluatingCount) {
          stopDebugOperator(lastContext, lastContext.value)
          next(null, lastContext)
        }
      }
      startDebugOperator('forEach', '', context)

      array.forEach((value, index) => {
        lastContext = createContext(
          lastContext || context,
          value,
          context.execution.path.concat(String(index))
        )
        const nextWithPath = createNextPath(evaluate)
        forEachItemOperator(null, lastContext, nextWithPath)
      })
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function parallel<Input, Config extends Configuration = TheConfig>(
  operators: TOperator<Config, Input, any>[]
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      let evaluatingCount = operators.length
      let lastContext
      let hasErrored = false
      const evaluate = (err) => {
        if (hasErrored) {
          return
        }
        if (err) {
          hasErrored = true
          return next(err, lastContext)
        }
        evaluatingCount--

        if (!evaluatingCount) {
          stopDebugOperator(lastContext, lastContext.value)
          next(null, lastContext)
        }
      }
      startDebugOperator('parallel', '', context)

      operators.forEach((operator, index) => {
        lastContext = createContext(
          lastContext || context,
          context.value,
          context.execution.path.concat(String(index))
        )
        const nextWithPath = createNextPath(evaluate)
        operator(null, lastContext, nextWithPath)
      })
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function filter<Input, Config extends Configuration = TheConfig>(
  operation: (input: TValueContext<Config, Input>) => boolean
): TOperator<Config, Input, Input> {
  const instance = (err, context, next, final) => {
    if (err) next(err)
    else {
      startDebugOperator('filter', operation, context)
      if (operation(context)) {
        stopDebugOperator(context, context.value)
        next(null, createContext(context, context.value))
      } else {
        stopDebugOperator(context, context.value)
        final(null, createContext(context, context.value))
      }
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function action<Input, Config extends Configuration = TheConfig>(
  operation: (input: TValueContext<Config, Input>) => void
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('action', operation, context)

      const mutationTree = context.proxyStateTree.getMutationTree()
      if (!IS_PRODUCTION) {
        mutationTree.onMutation((mutation) => {
          context.execution.emit(EventType.MUTATIONS, {
            ...context.execution,
            mutations: makeStringifySafeMutations([mutation]),
          })
          setTimeout(() => {
            const flushData = context.proxyStateTree.flush(true)
            if (flushData.mutations.length) {
              context.execution.send({
                type: 'flush',
                data: {
                  ...context.execution,
                  ...flushData,
                  mutations: makeStringifySafeMutations(flushData.mutations),
                },
              })
            }
          })
        })
      }
      const maybePromise: any = operation({
        ...context,
        state: mutationTree.state,
      })

      stopDebugOperator(context, maybePromise)

      next(
        null,
        createContext(
          context,
          maybePromise instanceof Promise
            ? maybePromise.then(() => context.value)
            : context.value
        )
      )
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function fork<
  Input,
  Paths extends { [key: string]: TOperator<Config, Input, any> },
  Config extends Configuration = TheConfig
>(
  operation: (input: TValueContext<Config, Input>) => keyof Paths,
  paths: Paths
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('fork', operation, context)
      const path = operation(context)
      const newContext = createContext(
        context,
        context.value,
        context.execution.path.concat(path)
      )
      const nextWithPaths = createNextPath((err, returnedContext) => {
        if (err) next(err)
        else {
          stopDebugOperator(context, context.value)
          next(null, { ...returnedContext, value: newContext.value })
        }
      })
      paths[path](null, newContext, nextWithPaths)
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function when<
  Input,
  OutputA,
  OutputB,
  Config extends Configuration = TheConfig
>(
  operation: (input: TValueContext<Config, Input>) => boolean,
  paths: {
    true: TOperator<Config, Input, OutputA>
    false: TOperator<Config, Input, OutputB>
  }
): TOperator<Config, Input, OutputA | OutputB> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('when', operation, context)
      const newContext = createContext(
        context,
        context.value,
        context.execution.path.concat('true')
      )
      if (operation(context)) {
        const nextWithPath = createNextPath(next)
        stopDebugOperator(context, context.value)
        paths.true(null, newContext, nextWithPath)
      } else {
        const newContext = createContext(
          context,
          context.value,
          context.execution.path.concat('false')
        )
        const nextWithPath = createNextPath(next)
        stopDebugOperator(context, context.value)
        paths.false(null, newContext, nextWithPath)
      }
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function wait<Input, Config extends Configuration = TheConfig>(
  ms: number
): TOperator<Config, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err)
    else {
      startDebugOperator('wait', ms, context)
      setTimeout(() => {
        stopDebugOperator(context, context.value)
        next(null, createContext(context, context.value))
      }, ms)
    }
  }
  instance[IS_OPERATOR] = true

  return instance
}

export function debounce<Input, Config extends Configuration = TheConfig>(
  ms: number
): TOperator<Config, Input, Input> {
  let timeout
  let previousFinal
  const instance = (err, context, next, final) => {
    if (err) {
      return next(err)
    }
    startDebugOperator('debounce', ms, context)
    if (timeout) {
      clearTimeout(timeout)
      previousFinal(null, context)
    }
    previousFinal = final
    timeout = setTimeout(() => {
      timeout = null
      stopDebugOperator(context, context.value)
      next(null, createContext(context, context.value))
    }, ms)
  }
  instance[IS_OPERATOR] = true

  return instance
}
