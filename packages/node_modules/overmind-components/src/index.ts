import { Component } from './Component'
import { Element } from './Element'
import { Null } from './Null'
import { Literal } from './Literal'
import { Events } from './Events'

export { FormEvent } from './Component'

export type Component<Props = object> = (
  props: Props extends { children: any } ? Props : Props & { children?: any }
) => JSX.Element

export * from './hooks'

function evaluateChildren(children) {
  return children.reduce((aggr, child) => {
    if (child === null) {
      return aggr.concat(new Null())
    } else if (typeof child !== 'object' && typeof child !== 'function') {
      return aggr.concat(new Literal(child))
    } else if (Array.isArray(child)) {
      return aggr.concat(
        child.map((subChild) => {
          if (subChild === null) {
            return new Null()
          } else if (
            typeof subChild !== 'object' &&
            typeof subChild !== 'function'
          ) {
            return new Literal(subChild)
          }

          return subChild
        })
      )
    }

    return aggr.concat(child)
  }, [])
}

export function createElement(tag, props, ...children) {
  if (typeof tag === 'function') {
    return new Component(tag, props, evaluateChildren(children))
  }

  return new Element(tag, props, evaluateChildren(children))
}

export const h = createElement

export function render(app, source, target, factory = document as any) {
  app.nextComponentId = 0

  const parent = new Element(target, null, [source])
  parent.mount(null, {
    app,
    factory,
    events: new Events(factory),
  })

  return parent
}
