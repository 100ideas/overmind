import { Overmind } from 'overmind'
import { h, render } from './'
import { mockDocument } from './mockDocument'
import { useState, useEffect, useRef } from './hooks'

describe('HOOKS', () => {
  describe('STATE', () => {
    test('should render component with initial state', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        const TestComponent = () => {
          const [state] = useState('foo')

          return <div>{state}</div>
        }
        render(app, <TestComponent />, target)

        expect(target.innerHTML).toMatchSnapshot()
      })
    })

    test('should rerender component with new state', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        const TestComponent = () => {
          const [state] = useState('foo')

          return <div>{state}</div>
        }
        const rootEl = render(app, <TestComponent />, target)

        rootEl.children[0].hooks[0][1]('bar')
        expect(target.innerHTML).toMatchSnapshot()
      })
    })
  })

  describe('EFFECT', () => {
    test('should run effect on initial render', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        let hasRun = false
        const TestComponent = () => {
          useEffect(() => {
            hasRun = true
          })

          return null
        }
        render(app, <TestComponent />, target)

        expect(hasRun).toBe(true)
      })
    })

    test('should rerun effect on new renders', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        let runCount = 0
        const TestComponent = () => {
          useEffect(() => {
            runCount++
          })

          return null
        }
        const rootEl = render(app, <TestComponent />, target)
        const component = rootEl.children[0]

        component.reconcile(component, true)
        expect(runCount).toBe(2)
      })
    })

    test('should not rerun effect with empty array as second arg', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        let runCount = 0
        const TestComponent = () => {
          useEffect(() => {
            runCount++
          }, [])

          return null
        }
        const rootEl = render(app, <TestComponent />, target)
        const component = rootEl.children[0]

        component.reconcile(component, true)
        expect(runCount).toBe(1)
      })
    })

    test('should not rerun effect with matching array', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        let runCount = 0
        const TestComponent = () => {
          useEffect(
            () => {
              runCount++
            },
            ['foo']
          )

          return null
        }
        const rootEl = render(app, <TestComponent />, target)
        const component = rootEl.children[0]

        component.reconcile(component, true)
        expect(runCount).toBe(1)
      })
    })

    test('should rerun effect with non matching array', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        let runCount = 0
        const TestComponent = () => {
          useEffect(
            () => {
              runCount++
            },
            [runCount]
          )

          return null
        }
        const rootEl = render(app, <TestComponent />, target)
        const component = rootEl.children[0]

        component.reconcile(component, true)
        expect(runCount).toBe(2)
      })
    })
  })

  describe('REF', () => {
    test('should provide element ref', () => {
      mockDocument((target) => {
        const app = new Overmind({})
        let providedRef
        const TestComponent = () => {
          const ref = useRef()
          providedRef = ref

          return <div ref={ref} />
        }
        render(app, <TestComponent />, target)

        expect(providedRef.current.tagName).toBe('DIV')
      })
    })
  })
})
