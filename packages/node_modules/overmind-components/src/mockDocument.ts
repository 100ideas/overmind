function getElementName(el) {
  if (el.nodeType === 3) {
    return `TEXT_NODE (${el.nodeValue})`
  }

  return el.id || el.tagName
}

export function mockDocument(cb) {
  const updates: any[] = []

  document.body.innerHTML = ''

  const rootElement = document.createElement('div')
  const originalAppendTarget = rootElement.appendChild
  const originalReplaceChild = rootElement.replaceChild
  const originalRemoveChild = rootElement.removeChild
  const originalInsertBefore = rootElement.insertBefore

  rootElement.id = 'app'
  rootElement.appendChild = function(child: any) {
    updates.push({
      type: 'ROOT - appendChild',
      child: getElementName(child),
    })

    return originalAppendTarget.call(rootElement, child)
  }
  rootElement.replaceChild = function(newChild, prevChild) {
    updates.push({
      type: 'ROOT - replaceChild',
      target: getElementName(rootElement),
      newChild: getElementName(newChild),
      prevChild: getElementName(prevChild),
    })

    return originalReplaceChild.call(rootElement, newChild, prevChild)
  }

  rootElement.insertBefore = function(newChild, prevChild) {
    updates.push({
      type: 'ROOT - insertBefore',
      target: getElementName(rootElement),
      newChild: getElementName(newChild),
      prevChild: getElementName(prevChild),
    })

    return originalInsertBefore.call(rootElement, newChild, prevChild)
  }

  rootElement.removeChild = function(child) {
    updates.push({
      type: 'ROOT - removeChild',
      target: getElementName(rootElement),
      child: getElementName(child),
    })

    return originalRemoveChild.call(rootElement, child)
  }

  document.body.appendChild(rootElement)

  const originalAddEventListener = document.addEventListener
  const originalCreateTextNode = document.createTextNode
  const originalCreateElement = document.createElement

  document.addEventListener = function(type, cb) {
    updates.push({
      type: 'addEventListener',
      eventType: type,
      cb,
    })

    return originalAddEventListener.call(type, cb)
  }

  document.createTextNode = function(content) {
    const node = originalCreateTextNode.call(document, content)

    updates.push({
      type: 'createTextNode',
      content,
    })

    const proxy = new Proxy(node, {
      set(obj, prop, value) {
        if (prop === 'nodeValue') {
          updates.push({
            type: 'nodeValue',
            target: getElementName(node),
          })
        }
        return Reflect.set(obj, prop, value)
      },
    })

    return proxy
  }

  document.createElement = function(tagName, options) {
    const el = originalCreateElement.call(document, tagName, options)
    const originalAppendChild = el.appendChild
    const originalReplaceChild = el.replaceChild
    const originalInsertBefore = el.insertBefore
    const originalRemoveChild = el.removeChild
    const originalSetAttribute = el.setAttribute
    const originalRemoveAttribute = el.removeAttribute

    updates.push({
      type: 'createElement',
      tagName,
    })

    el.appendChild = function(child) {
      updates.push({
        type: 'appendChild',
        target: getElementName(el),
        child: getElementName(child),
      })

      return originalAppendChild.call(el, child)
    }

    el.replaceChild = function(newChild, prevChild) {
      updates.push({
        type: 'replaceChild',
        target: getElementName(el),
        newChild: getElementName(newChild),
        prevChild: getElementName(prevChild),
      })

      return originalReplaceChild.call(el, newChild, prevChild)
    }

    el.insertBefore = function(newChild, prevChild) {
      updates.push({
        type: 'insertBefore',
        target: getElementName(el),
        newChild: getElementName(newChild),
        prevChild: getElementName(prevChild),
      })

      return originalInsertBefore.call(el, newChild, prevChild)
    }

    el.removeChild = function(child) {
      updates.push({
        type: 'removeChild',
        target: getElementName(el),
        child: getElementName(child),
      })

      return originalRemoveChild.call(el, child)
    }

    el.setAttribute = function(key, value) {
      if (key === 'id') {
        return originalSetAttribute.call(el, key, value)
      }

      updates.push({
        type: 'setAttribute',
        target: getElementName(el),
        key,
        value,
      })

      return originalSetAttribute.call(el, key, value)
    }

    el.removeAttribute = function(key) {
      if (key === 'id') {
        return originalRemoveAttribute.call(el, key)
      }

      updates.push({
        type: 'removeAttribute',
        target: getElementName(el),
        key,
      })

      return originalRemoveAttribute.call(el, key)
    }

    return el
  }

  cb(rootElement, updates)

  document.addEventListener = originalAddEventListener
  document.createTextNode = originalCreateTextNode
  document.createElement = originalCreateElement
}
