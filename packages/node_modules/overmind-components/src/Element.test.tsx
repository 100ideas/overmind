import { Overmind } from 'overmind'
import { testRender } from './testRender'
import { h } from './'

describe('ELEMENT', () => {
  describe('KEYS', () => {
    test('should render keyed children', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
        </ul>
      )
      const target = test.getTargetElement()

      expect(test.getUpdates().length).toBe(10)
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'bar'
      )
    })
    test('should reconcile removing last keyed child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>foo</li>
        </ul>
      )

      expect(test.getUpdates().length).toBe(11)
      expect(target.children[0].children.length).toBe(1)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
    })

    test('should reconcile removing first child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li key="bar">bar</li>
        </ul>
      )

      expect(test.getUpdates().length).toBe(12)
      expect(test.getUpdates()[10].type).toBe('replaceChild')
      expect(target.children[0].children.length).toBe(1)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'bar'
      )
    })
    test('should reconcile removing in between keyed children', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
          <li key="baz">baz</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li key="foo">foo</li>
          <li key="baz">baz</li>
        </ul>
      )

      expect(test.getUpdates().length).toBe(16)
      expect(test.getUpdates()[14].type).toBe('replaceChild')
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'baz'
      )
    })
    test('should reconcile prepending child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li key="foo">foo</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li key="bar">bar</li>
          <li key="foo">foo</li>
        </ul>
      )

      expect(test.getUpdates().length).toBe(11)
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'bar'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'foo'
      )
    })
    test('should reconcile appending child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li key="foo">foo</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
        </ul>
      )
      expect(test.getUpdates().length).toBe(10)
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'bar'
      )
    })
    test('should reconcile appending in between child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="baz">baz</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
          <li key="baz">baz</li>
        </ul>
      )
      expect(test.getUpdates().length).toBe(15)
      expect(target.children[0].children.length).toBe(3)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'bar'
      )
      expect(target.children[0].children[2].children[0].el.nodeValue).toBe(
        'baz'
      )
    })
  })
  describe('CHILDREN', () => {
    test('should render children', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
          <li>bar</li>
        </ul>
      )
      const target = test.getTargetElement()

      expect(test.getUpdates().length).toBe(10)
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'bar'
      )
    })
    test('should reconcile removing last child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
          <li>bar</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>foo</li>
        </ul>
      )

      expect(test.getUpdates().length).toBe(11)
      expect(target.children[0].children.length).toBe(1)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
    })
    test('should reconcile removing first child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
          <li>bar</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>bar</li>
        </ul>
      )

      expect(test.getUpdates().length).toBe(12)
      expect(test.getUpdates()[10].type).toBe('nodeValue')
      expect(target.children[0].children.length).toBe(1)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'bar'
      )
    })
    test('should reconcile removing in between child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
          <li>bar</li>
          <li>baz</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>foo</li>
          <li>baz</li>
        </ul>
      )
      expect(test.getUpdates().length).toBe(16)
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'baz'
      )
    })
    test('should reconcile prepending child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>bar</li>
          <li>foo</li>
        </ul>
      )
      expect(test.getUpdates().length).toBe(11)
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'bar'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'foo'
      )
    })
    test('should reconcile appending child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>foo</li>
          <li>bar</li>
        </ul>
      )
      expect(test.getUpdates().length).toBe(10)
      expect(target.children[0].children.length).toBe(2)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'bar'
      )
    })
    test('should reconcile appending in between child', () => {
      const app = new Overmind({})
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
          <li>baz</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>foo</li>
          <li>bar</li>
          <li>baz</li>
        </ul>
      )
      expect(test.getUpdates().length).toBe(15)
      expect(target.children[0].children.length).toBe(3)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[1].children[0].el.nodeValue).toBe(
        'bar'
      )
      expect(target.children[0].children[2].children[0].el.nodeValue).toBe(
        'baz'
      )
    })
    test('should reconcile appending in between child where new child is NULL', () => {
      const app = new Overmind({})
      const TestComponent = () => null
      const test = testRender(
        app,
        <ul>
          <li>foo</li>
          <li>baz</li>
        </ul>
      )
      const target = test.getTargetElement()

      target.children[0].reconcile(
        <ul>
          <li>foo</li>
          <TestComponent />
          <li>baz</li>
        </ul>
      )
      expect(test.getUpdates().length).toBe(15)
      expect(target.children[0].children.length).toBe(3)
      expect(target.children[0].children[0].children[0].el.nodeValue).toBe(
        'foo'
      )
      expect(target.children[0].children[2].children[0].el.nodeValue).toBe(
        'baz'
      )
    })
  })
  describe('ATTRIBUTES', () => {
    test('should reconcile CLASSNAME', () => {
      const app = new Overmind({})
      const test = testRender(app, <div />)
      const target = test.getTargetElement()

      target.children[0].reconcile(<div className="foo" />)

      expect(test.getUpdates().length).toBe(3)
      expect(target.children[0].el.attrs).toEqual({
        class: 'foo',
      })
    })
  })
})
