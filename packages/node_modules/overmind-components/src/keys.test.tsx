import { Overmind } from 'overmind'
import { h, render } from './'
import { mockDocument } from './mockDocument'

describe('KEYS', () => {
  test('should render keyed children', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      render(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
        </ul>,
        target
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile removing last keyed child', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
        </ul>,
        target
      )

      rootEl.children[0].reconcile(
        <ul>
          <li key="foo">foo</li>
        </ul>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile removing first child', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <ul>
          <li id="foo" key="foo">
            foo
          </li>
          <li id="bar" key="bar">
            bar
          </li>
        </ul>,
        target
      )

      rootEl.children[0].reconcile(
        <ul>
          <li id="bar" key="bar">
            bar
          </li>
        </ul>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile removing in between keyed children', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
          <li key="baz">baz</li>
        </ul>,
        target
      )
      rootEl.children[0].reconcile(
        <ul>
          <li key="foo">foo</li>
          <li key="baz">baz</li>
        </ul>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile prepending child', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <ul>
          <li id="foo" key="foo">
            foo
          </li>
        </ul>,
        target
      )
      rootEl.children[0].reconcile(
        <ul>
          <li id="bar" key="bar">
            bar
          </li>
          <li id="foo" key="foo">
            foo
          </li>
        </ul>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile appending child', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <ul>
          <li key="foo">foo</li>
        </ul>,
        target
      )

      rootEl.children[0].reconcile(
        <ul>
          <li key="foo">foo</li>
          <li key="bar">bar</li>
        </ul>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile appending in between child', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <ul>
          <li id="foo" key="foo">
            foo
          </li>
          <li id="baz" key="baz">
            baz
          </li>
        </ul>,
        target
      )

      rootEl.children[0].reconcile(
        <ul>
          <li id="foo" key="foo">
            foo
          </li>
          <li id="bar" key="bar">
            bar
          </li>
          <li id="baz" key="baz">
            baz
          </li>
        </ul>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile multiple prepend and remove child', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <ul>
          <li id="foo" key="foo">
            foo
          </li>
          <li id="bar" key="bar">
            bar
          </li>
        </ul>,
        target
      )
      rootEl.children[0].reconcile(
        <ul>
          <li id="baz" key="baz">
            baz
          </li>
          <li id="foo" key="foo">
            foo
          </li>
          <li id="bar" key="bar">
            bar
          </li>
        </ul>
      )
      rootEl.children[0].reconcile(
        <ul>
          <li id="foo" key="foo">
            foo
          </li>
          <li id="bar" key="bar">
            bar
          </li>
        </ul>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })
})
