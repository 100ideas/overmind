// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KEYS should reconcile appending child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`KEYS should reconcile appending child 2`] = `"<ul><li>foo</li><li>bar</li></ul>"`;

exports[`KEYS should reconcile appending in between child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "foo",
    "type": "appendChild",
  },
  Object {
    "child": "foo",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "baz",
    "type": "appendChild",
  },
  Object {
    "child": "baz",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "bar",
    "type": "appendChild",
  },
  Object {
    "newChild": "bar",
    "prevChild": "baz",
    "target": "UL",
    "type": "replaceChild",
  },
  Object {
    "child": "baz",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`KEYS should reconcile appending in between child 2`] = `"<ul><li id=\\"foo\\">foo</li><li id=\\"bar\\">bar</li><li id=\\"baz\\">baz</li></ul>"`;

exports[`KEYS should reconcile multiple prepend and remove child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "foo",
    "type": "appendChild",
  },
  Object {
    "child": "foo",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "bar",
    "type": "appendChild",
  },
  Object {
    "child": "bar",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "baz",
    "type": "appendChild",
  },
  Object {
    "newChild": "baz",
    "prevChild": "foo",
    "target": "UL",
    "type": "replaceChild",
  },
  Object {
    "newChild": "foo",
    "prevChild": "bar",
    "target": "UL",
    "type": "replaceChild",
  },
  Object {
    "child": "bar",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "newChild": "foo",
    "prevChild": "baz",
    "target": "UL",
    "type": "replaceChild",
  },
  Object {
    "child": "bar",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`KEYS should reconcile multiple prepend and remove child 2`] = `"<ul><li id=\\"foo\\">foo</li><li id=\\"bar\\">bar</li></ul>"`;

exports[`KEYS should reconcile prepending child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "foo",
    "type": "appendChild",
  },
  Object {
    "child": "foo",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "bar",
    "type": "appendChild",
  },
  Object {
    "newChild": "bar",
    "prevChild": "foo",
    "target": "UL",
    "type": "replaceChild",
  },
  Object {
    "child": "foo",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`KEYS should reconcile prepending child 2`] = `"<ul><li id=\\"bar\\">bar</li><li id=\\"foo\\">foo</li></ul>"`;

exports[`KEYS should reconcile removing first child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "foo",
    "type": "appendChild",
  },
  Object {
    "child": "foo",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "bar",
    "type": "appendChild",
  },
  Object {
    "child": "bar",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "newChild": "bar",
    "prevChild": "foo",
    "target": "UL",
    "type": "replaceChild",
  },
]
`;

exports[`KEYS should reconcile removing first child 2`] = `"<ul><li id=\\"bar\\">bar</li></ul>"`;

exports[`KEYS should reconcile removing in between keyed children 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "newChild": "LI",
    "prevChild": "LI",
    "target": "UL",
    "type": "replaceChild",
  },
]
`;

exports[`KEYS should reconcile removing in between keyed children 2`] = `"<ul><li>foo</li><li>baz</li></ul>"`;

exports[`KEYS should reconcile removing last keyed child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "removeChild",
  },
]
`;

exports[`KEYS should reconcile removing last keyed child 2`] = `"<ul><li>foo</li></ul>"`;

exports[`KEYS should render keyed children 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
]
`;

exports[`KEYS should render keyed children 2`] = `"<ul><li>foo</li><li>bar</li></ul>"`;
