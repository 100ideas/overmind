// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ELEMENT should reconcile CLASSNAME 1`] = `
Array [
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "child": "DIV",
    "type": "ROOT - appendChild",
  },
  Object {
    "key": "class",
    "target": "DIV",
    "type": "setAttribute",
    "value": "foo",
  },
]
`;

exports[`ELEMENT should reconcile CLASSNAME 2`] = `"<div class=\\"foo\\"></div>"`;

exports[`ELEMENT should reconcile appending child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`ELEMENT should reconcile appending child 2`] = `"<ul><li>foo</li><li>bar</li></ul>"`;

exports[`ELEMENT should reconcile appending in between child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "target": "TEXT_NODE (baz)",
    "type": "nodeValue",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`ELEMENT should reconcile appending in between child 2`] = `"<ul><li>foo</li><li>bar</li><li>baz</li></ul>"`;

exports[`ELEMENT should reconcile appending in between child where new child is NULL 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "removeChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`ELEMENT should reconcile appending in between child where new child is NULL 2`] = `"<ul><li>foo</li><li>baz</li></ul>"`;

exports[`ELEMENT should reconcile prepending child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "target": "TEXT_NODE (foo)",
    "type": "nodeValue",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
]
`;

exports[`ELEMENT should reconcile prepending child 2`] = `"<ul><li>bar</li><li>foo</li></ul>"`;

exports[`ELEMENT should reconcile removing first child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "target": "TEXT_NODE (foo)",
    "type": "nodeValue",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "removeChild",
  },
]
`;

exports[`ELEMENT should reconcile removing first child 2`] = `"<ul><li>bar</li></ul>"`;

exports[`ELEMENT should reconcile removing in between child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "baz",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (baz)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "target": "TEXT_NODE (bar)",
    "type": "nodeValue",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "removeChild",
  },
]
`;

exports[`ELEMENT should reconcile removing in between child 2`] = `"<ul><li>foo</li><li>baz</li></ul>"`;

exports[`ELEMENT should reconcile removing last child 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "removeChild",
  },
]
`;

exports[`ELEMENT should reconcile removing last child 2`] = `"<ul><li>foo</li></ul>"`;

exports[`ELEMENT should render children 1`] = `
Array [
  Object {
    "tagName": "ul",
    "type": "createElement",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "tagName": "li",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "LI",
    "type": "appendChild",
  },
  Object {
    "child": "LI",
    "target": "UL",
    "type": "appendChild",
  },
  Object {
    "child": "UL",
    "type": "ROOT - appendChild",
  },
]
`;

exports[`ELEMENT should render children 2`] = `"<ul><li>foo</li><li>bar</li></ul>"`;
