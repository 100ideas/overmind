// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`COMPONENT should reconcile NULL components to NULL component 1`] = `
Array [
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "child": "parent",
    "type": "ROOT - appendChild",
  },
]
`;

exports[`COMPONENT should reconcile NULL components to NULL component 2`] = `"<div id=\\"parent\\"></div>"`;

exports[`COMPONENT should reconcile NULL components to component 1`] = `
Array [
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "child": "parent",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "bar",
    "type": "appendChild",
  },
  Object {
    "child": "bar",
    "target": "parent",
    "type": "appendChild",
  },
]
`;

exports[`COMPONENT should reconcile NULL components to component 2`] = `"<div id=\\"parent\\"><div id=\\"bar\\">bar</div></div>"`;

exports[`COMPONENT should reconcile components 1`] = `
Array [
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "foo",
    "type": "appendChild",
  },
  Object {
    "child": "foo",
    "target": "parent",
    "type": "appendChild",
  },
  Object {
    "child": "parent",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "bar",
    "type": "appendChild",
  },
  Object {
    "newChild": "bar",
    "prevChild": "foo",
    "target": "DIV",
    "type": "replaceChild",
  },
]
`;

exports[`COMPONENT should reconcile components 2`] = `"<div><div id=\\"bar\\">bar</div></div>"`;

exports[`COMPONENT should reconcile components to NULL component 1`] = `
Array [
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "foo",
    "type": "appendChild",
  },
  Object {
    "child": "foo",
    "target": "parent",
    "type": "appendChild",
  },
  Object {
    "child": "parent",
    "type": "ROOT - appendChild",
  },
  Object {
    "child": "foo",
    "target": "parent",
    "type": "removeChild",
  },
]
`;

exports[`COMPONENT should reconcile components to NULL component 2`] = `"<div id=\\"parent\\"></div>"`;

exports[`COMPONENT should reconcile nested components from within 1`] = `
Array [
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "bar",
    "type": "appendChild",
  },
  Object {
    "child": "bar",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "span",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "foo",
    "type": "appendChild",
  },
  Object {
    "newChild": "foo",
    "prevChild": "bar",
    "target": "app",
    "type": "ROOT - replaceChild",
  },
]
`;

exports[`COMPONENT should reconcile nested components from within 2`] = `"<span id=\\"foo\\">foo</span>"`;

exports[`COMPONENT should update on state changes 1`] = `
Array [
  Object {
    "tagName": "span",
    "type": "createElement",
  },
  Object {
    "content": "foo",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (foo)",
    "target": "SPAN",
    "type": "appendChild",
  },
  Object {
    "child": "SPAN",
    "type": "ROOT - appendChild",
  },
  Object {
    "tagName": "div",
    "type": "createElement",
  },
  Object {
    "content": "bar",
    "type": "createTextNode",
  },
  Object {
    "child": "TEXT_NODE (bar)",
    "target": "DIV",
    "type": "appendChild",
  },
  Object {
    "newChild": "DIV",
    "prevChild": "SPAN",
    "target": "app",
    "type": "ROOT - replaceChild",
  },
]
`;

exports[`COMPONENT should update on state changes 2`] = `"<div>bar</div>"`;
