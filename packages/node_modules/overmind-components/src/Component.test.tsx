import { Overmind } from 'overmind'
import { mockDocument } from './mockDocument'
import { Component, h, useOvermind, render } from './'
import { Null } from './Null'

describe('COMPONENT', () => {
  test('should reconcile components', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const TestCompA = () => <div id="foo">foo</div>
      const TestCompB = () => <div id="bar">bar</div>
      const parent = render(
        app,
        <div id="parent">
          <TestCompA />
        </div>,
        target
      )

      parent.children[0].reconcile(
        <div>
          <TestCompB />
        </div>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile NULL components to component', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const TestCompA = () => null
      const TestCompB = () => <div id="bar">bar</div>
      const parent = render(
        app,
        <div id="parent">
          <TestCompA />
        </div>,
        target
      )

      parent.children[0].reconcile(
        <div id="parent">
          <TestCompB />
        </div>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile components to NULL component', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const TestCompA = () => <div id="foo">foo</div>
      const TestCompB = () => null
      const parent = render(
        app,
        <div id="parent">
          <TestCompA />
        </div>,
        target
      )

      parent.children[0].reconcile(
        <div id="parent">
          <TestCompB />
        </div>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile NULL components to NULL component', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const TestCompA = () => null
      const TestCompB = () => null
      const parent = render(
        app,
        <div id="parent">
          <TestCompA />
        </div>,
        target
      )

      parent.children[0].reconcile(
        <div id="parent">
          <TestCompB />
        </div>
      )

      expect(updates).toMatchSnapshot()

      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile nested components from within', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      let renderCount = 0
      const TestCompA = () =>
        renderCount++ ? <span id="foo">foo</span> : <div id="bar">bar</div>
      const TestCompB = () => <TestCompA />
      const parent = render(app, <TestCompB />, target)
      const testCompA = parent.children[0].vtree

      testCompA.reconcile(testCompA, true)

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should update on state changes', () => {
    mockDocument((target, updates) => {
      const config = {
        state: {
          foo: true,
        },
        actions: {
          changeFoo({ state }) {
            state.foo = false
          },
        },
      }
      const app = new Overmind(config)

      const TestComp: Component = () => {
        const { state } = useOvermind<typeof config>()
        return state.foo ? <span>foo</span> : <div>bar</div>
      }

      render(app, <TestComp />, target)

      app.actions.changeFoo()

      expect(updates).toMatchSnapshot()

      expect(target.innerHTML).toMatchSnapshot()
    })
  })
})
