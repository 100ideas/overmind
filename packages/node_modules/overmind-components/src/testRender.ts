import { render } from './'

export function testRender(app, source) {
  const updates: any[] = []
  const target = {
    tagName: 'div',
    appendChild(...args) {
      updates.push({
        type: 'target:appendChild',
        args,
      })
    },
    replaceChild(...args) {
      updates.push({
        type: 'target:replaceChild',
        args,
      })
    },
    insertBefore(...args) {
      updates.push({
        type: 'target:insertBefore',
        args,
      })
    },
    removeChild(...args) {
      updates.push({
        type: 'target:removeChild',
        args,
      })
    },
  }

  const targetElement = render(app, source, target, {
    addEventListener(...args) {
      updates.push({
        type: 'addEventListener',
        args,
      })
    },
    createTextNode(...args) {
      updates.push({
        type: 'createTextNode',
        args,
      })

      let value = args[0]

      return {
        get nodeValue() {
          return value
        },
        set nodeValue(newValue) {
          value = newValue
          updates.push({
            type: 'nodeValue',
            args: [newValue],
          })
        },
      }
    },
    createElement(...args) {
      updates.push({
        type: 'createElement',
        args,
      })

      const el = {
        tag: args[0],
        attrs: {},
        appendChild(...args) {
          updates.push({
            type: 'appendChild',
            args,
          })
        },
        insertBefore(...args) {
          updates.push({
            type: 'insertBefore',
            args,
          })
        },
        removeChild(...args) {
          updates.push({
            type: 'removeChild',
            args,
          })
        },
        replaceChild(...args) {
          updates.push({
            type: 'replaceChild',
            args,
          })
        },
        setAttribute(...args) {
          el.attrs[args[0]] = args[1]
          updates.push({
            type: 'setAttribute',
            args,
          })
        },
        removeAttribute(...args) {
          delete el.attrs[args[0]]
          updates.push({
            type: 'removeAttribute',
            args,
          })
        },
      }

      return el
    },
  })

  return {
    clear() {
      updates.length = 0
    },
    getUpdates() {
      return updates
    },
    getUpdatesJson() {
      return JSON.stringify(updates, null, 2)
    },
    getTargetElement() {
      return targetElement
    },
  }
}
