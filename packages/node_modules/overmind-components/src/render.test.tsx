import { Overmind } from 'overmind'
import { testRender } from './testRender'
import { h } from './'
import { Null } from './Null'

describe('RENDER', () => {
  test.only('should create element', () => {
    const app = new Overmind({})

    const test = testRender(app, <div />)
    const updates = test.getUpdates()
    expect(updates.length).toBe(2)
    expect(updates[0]).toEqual({
      type: 'createElement',
      args: ['div'],
    })
  })
  test('should create nested element', () => {
    const app = new Overmind({})

    const test = testRender(
      app,
      <div>
        <span />
      </div>
    )
    const updates = test.getUpdates()
    expect(updates[0]).toEqual({
      type: 'createElement',
      args: ['div'],
    })
    expect(updates[1]).toEqual({
      type: 'createElement',
      args: ['span'],
    })
    expect(updates[2].type).toBe('appendChild')
    const el = test.getTargetElement()
    expect(el.children[0].tag).toBe('div')
    expect(el.children[0].children[0].tag).toBe('span')
  })
  test('should render component', () => {
    const app = new Overmind({})
    const TestComp = () => {
      return <div />
    }
    const test = testRender(app, <TestComp />)
    const updates = test.getUpdates()
    expect(updates[0]).toEqual({
      type: 'createElement',
      args: ['div'],
    })
    const el = test.getTargetElement()
    expect(el.children[0].tag).toBe(TestComp)
    expect(el.children[0].vtree.tag).toBe('div')
  })
  test('should render NULL component', () => {
    const app = new Overmind({})
    const TestComp = () => {
      return null
    }
    const test = testRender(app, <TestComp />)
    const updates = test.getUpdates()

    expect(updates.length).toBe(0)
    const el = test.getTargetElement()
    expect(el.children[0].tag).toBe(TestComp)
    expect(el.children[0].vtree).toBeInstanceOf(Null)
  })
})
