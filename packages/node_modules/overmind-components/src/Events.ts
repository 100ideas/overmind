export class Events {
  events = {}
  factory: any
  constructor(factory) {
    this.factory = factory
  }
  isEventAttr(attr) {
    return (
      typeof attr === 'string' &&
      attr.length > 2 &&
      attr.substr(0, 2) === 'on' &&
      attr.substr(2, 1).toUpperCase() === attr.substr(2, 1)
    )
  }
  register(type, element, cb) {
    if (!cb) {
      return
    }

    if (!this.events[type]) {
      this.events[type] = new Map()
      this.factory.addEventListener(type, (event) => {
        let node = event.target

        while (node) {
          if (this.events[type].has(node)) {
            let breakOut = false
            const eventToDispatch = new Proxy(event, {
              get(target, prop) {
                switch (prop) {
                  case 'stopPropagation':
                    return () => (breakOut = true)
                  case 'target':
                    return target.target
                  case 'currentTarget':
                    return node
                  default:
                    return target[prop]
                }
              },
            })
            this.events[type].get(node) &&
              this.events[type].get(node)(eventToDispatch)

            if (breakOut) {
              return
            }
          }
          node = node.parentNode
        }
      })
    }

    this.events[type].set(element, cb)
  }
  unregister(type, element) {
    this.events[type].delete(element)
  }
}
