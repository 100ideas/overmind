import { Overmind } from 'overmind'
import { mockDocument } from './mockDocument'
import { h, render } from './'
import { Literal } from './Literal'
import { Null } from './Null'

describe('LITERAL', () => {
  test('should reconcile literals', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(app, <div>foo</div>, target)
      const foo = rootEl.children[0].children[0]
      foo.reconcile(new Literal('bar'))
      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile element literal children', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(app, <div>foo</div>, target)
      rootEl.children[0].reconcile(<div>bar</div>)

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile NULL to literal', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(app, <div>{null}</div>, target)

      rootEl.children[0].reconcile(<div>foo</div>)

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile literal to NULL', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(app, <div>foo</div>, target)

      rootEl.children[0].reconcile(<div>{null}</div>)

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })

  test('should reconcile NULL to literal to nearest element', () => {
    mockDocument((target, updates) => {
      const app = new Overmind({})
      const rootEl = render(
        app,
        <div>
          foo{null}
          {null}
          {null}
          baz
        </div>,
        target
      )
      rootEl.children[0].reconcile(
        <div>
          foo{null}bar{null}baz
        </div>
      )

      expect(updates).toMatchSnapshot()
      expect(target.innerHTML).toMatchSnapshot()
    })
  })
})
