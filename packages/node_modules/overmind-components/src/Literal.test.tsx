import { Overmind } from 'overmind'
import { testRender } from './testRender'
import { h } from './'
import { Literal } from './Literal'
import { Null } from './Null'

describe('LITERAL', () => {
  test('should reconcile literals', () => {
    const app = new Overmind({})
    const test = testRender(app, <div>foo</div>)
    const foo = test.getTargetElement().children[0].children[0]
    foo.reconcile(new Literal('bar'))
    expect(foo.value).toBe('bar')
  })
  test('should reconcile element literal children', () => {
    const app = new Overmind({})
    const test = testRender(app, <div>foo</div>)
    const target = test.getTargetElement()
    target.children[0].reconcile(<div>bar</div>)
    const foo = target.children[0].children[0]

    expect(foo.value).toBe('bar')
    expect(foo.el.nodeValue).toBe('bar')
  })
  test('should reconcile NULL to literal', () => {
    const app = new Overmind({})
    const test = testRender(app, <div>{null}</div>)
    const target = test.getTargetElement()
    target.children[0].reconcile(<div>foo</div>)

    const foo = target.children[0].children[0]
    expect(test.getUpdates().length).toBe(4)
    expect(foo.value).toBe('foo')
    expect(foo.el.nodeValue).toBe('foo')
  })
  test('should reconcile literal to NULL', () => {
    const app = new Overmind({})
    const test = testRender(app, <div>foo</div>)
    const target = test.getTargetElement()
    target.children[0].reconcile(<div>{null}</div>)
    const foo = target.children[0].children[0]
    expect(test.getUpdates().length).toBe(5)
    expect(foo).toBeInstanceOf(Null)
  })
  test('should reconcile NULL to literal to nearest element', () => {
    const app = new Overmind({})
    const test = testRender(
      app,
      <div>
        foo{null}
        {null}
        {null}
        baz
      </div>
    )
    test.getTargetElement().children[0].reconcile(
      <div>
        foo{null}bar{null}baz
      </div>
    )

    expect(test.getUpdates()[7].args[1].nodeValue).toBe('baz')
    expect(test.getUpdates().length).toBe(8)
  })
})
