import { IProxyStateTree } from './'
import { scopeState } from './proxify'

export interface ITrackCallback {
  (flushId: number, isAsync: boolean): void
}

const cache = []

export class TrackStateAccessTree<T extends object> {
  master: IProxyStateTree
  paths: Set<string> = new Set()
  callback: ITrackCallback
  state: T
  constructor(state: T) {
    this.state = cache.pop() || scopeState(this, state)
  }
  addTrackingPath(path: string) {
    this.paths.add(path)
    this.master.addPathDependency(path, this.callback)
  }
  track(cb: ITrackCallback) {
    this.paths.clear()
    this.callback = cb
  }
  dispose() {
    cache.push(this)
  }
}
