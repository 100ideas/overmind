import { TTree } from './'
import { ITrackStateTree } from './TrackStateTree'
import { ITrackMutationTree } from './TrackMutationTree'

const isPlainObject = require('is-plain-object')

export const IS_PROXY = Symbol('IS_PROXY')
export const PATH = Symbol('PATH')
export const VALUE = Symbol('VALUE')

const arrayMutations = new Set([
  'push',
  'shift',
  'pop',
  'unshift',
  'splice',
  'reverse',
  'sort',
  'copyWithin',
])

export class Proxifier {
  constructor(private tree: TTree) {}
  private concat(path, prop) {
    return path ? path + '.' + prop : prop
  }

  private shouldTrackMutations(path) {
    return (
      this.tree.master.options.devmode ||
      (path && this.tree.master.pathDependencies[path])
    )
  }

  private ensureMutationTrackingIsEnabled(path) {
    if (this.tree.master.options.devmode && !this.tree.canMutate()) {
      throw new Error(
        `proxy-state-tree - You are mutating the path "${path}", but it is not allowed`
      )
    }
  }

  private ensureValueDosntExistInStateTreeElsewhere(value) {
    if (value && value[IS_PROXY] === true) {
      throw new Error(
        `proxy-state-tree - You are trying to insert a value that already exists in the state tree on path "${
          value[PATH]
        }"`
      )
    }
  }

  private trackPath(path: string) {
    if (this.tree.canTrack()) {
      const trackStateAccessTree = this.tree as ITrackStateTree<any>
      trackStateAccessTree.addTrackingPath(path)
    }
  }
  // With tracking trees we want to ensure that we are always
  // on the currently tracked tree. This ensures when we access
  // a tracking proxy that is not part of the current tracking tree (pass as prop)
  // we move the ownership to the current tracker
  private getEnsuredTree() {
    const currentTree = this.tree.master.currentTree

    if (currentTree && currentTree.canTrack() && this.tree.canTrack()) {
      return this.tree.master.currentTree
    }

    return this.tree
  }
  private createArrayProxy(value, path) {
    var proxifier = this

    return (
      proxifier.tree.master.getProxy(path, proxifier.tree) ||
      proxifier.tree.master.addProxy(
        path,
        proxifier.tree,
        new Proxy(value, {
          get(target, prop) {
            if (prop === IS_PROXY) return true
            if (prop === PATH) return path
            if (prop === VALUE) return value

            if (
              prop === 'length' ||
              (typeof target[prop] === 'function' &&
                !arrayMutations.has(String(prop))) ||
              typeof prop === 'symbol'
            ) {
              return target[prop]
            }

            const ensuredTree = proxifier.getEnsuredTree()
            const nestedPath = proxifier.concat(path, prop)
            ensuredTree.proxifier.trackPath(nestedPath)

            if (
              arrayMutations.has(String(prop)) &&
              ensuredTree.proxifier.shouldTrackMutations(nestedPath)
            ) {
              ensuredTree.proxifier.ensureMutationTrackingIsEnabled(nestedPath)
              return (...args) => {
                const mutationTree = ensuredTree as ITrackMutationTree<any>
                mutationTree.addMutation({
                  method: String(prop),
                  path: path,
                  args: args,
                })

                return target[prop](...args)
              }
            }

            if (target[prop] === undefined) {
              return undefined
            }

            return ensuredTree.proxifier.proxify(target[prop], nestedPath)
          },
          set(target, prop, value) {
            const nestedPath = proxifier.concat(path, prop)

            proxifier.ensureMutationTrackingIsEnabled(nestedPath)
            proxifier.ensureValueDosntExistInStateTreeElsewhere(value)

            const mutationTree = proxifier.tree as ITrackMutationTree<any>

            mutationTree.addMutation({
              method: 'set',
              path: nestedPath,
              args: [value],
            })

            return Reflect.set(target, prop, value)
          },
        })
      )
    )
  }

  private createObjectProxy(value, path) {
    const proxifier = this

    return (
      proxifier.tree.master.getProxy(path, proxifier.tree) ||
      proxifier.tree.master.addProxy(
        path,
        proxifier.tree,
        new Proxy(value, {
          get(target, prop) {
            if (prop === IS_PROXY) return true
            if (prop === PATH) return path
            if (prop === VALUE) return value

            if (typeof prop === 'symbol' || prop in Object.prototype)
              return target[prop]

            const ensuredTree = proxifier.getEnsuredTree()
            const targetValue = target[prop]
            const nestedPath = proxifier.concat(path, prop)
            ensuredTree.proxifier.trackPath(nestedPath)

            if (typeof targetValue === 'function') {
              const dynamicValue = ensuredTree.master.options.dynamicWrapper
                ? ensuredTree.master.options.dynamicWrapper(
                    ensuredTree,
                    nestedPath,
                    targetValue
                  )
                : targetValue(ensuredTree, nestedPath)

              if (dynamicValue && dynamicValue[IS_PROXY]) {
                return proxifier.proxify(
                  dynamicValue[VALUE],
                  dynamicValue[PATH]
                )
              }

              return dynamicValue
            }

            if (targetValue === undefined) {
              return undefined
            }

            return ensuredTree.proxifier.proxify(targetValue, nestedPath)
          },
          set(target, prop, value) {
            const nestedPath = proxifier.concat(path, prop)

            proxifier.ensureMutationTrackingIsEnabled(nestedPath)
            proxifier.ensureValueDosntExistInStateTreeElsewhere(value)

            if (proxifier.shouldTrackMutations(nestedPath)) {
              let objectChangePath

              if (!(prop in target)) {
                objectChangePath = path
              }

              const mutationTree = proxifier.tree as ITrackMutationTree<any>

              mutationTree.addMutation(
                {
                  method: 'set',
                  path: nestedPath,
                  args: [value],
                },
                objectChangePath
              )
            }

            if (typeof value === 'function') {
              return Reflect.set(target, prop, () => value)
            }

            return Reflect.set(target, prop, value)
          },
          deleteProperty(target, prop) {
            const nestedPath = proxifier.concat(path, prop)

            proxifier.ensureMutationTrackingIsEnabled(nestedPath)

            if (proxifier.shouldTrackMutations(nestedPath)) {
              let objectChangePath
              if (prop in target) {
                objectChangePath = path
              }

              const mutationTree = proxifier.tree as ITrackMutationTree<any>
              mutationTree.addMutation(
                {
                  method: 'unset',
                  path: nestedPath,
                  args: [],
                },
                objectChangePath
              )
            }

            delete target[prop]

            return true
          },
        })
      )
    )
  }
  proxify(value, path) {
    if (value) {
      if (value[IS_PROXY] && value[PATH] !== path) {
        return this.proxify(value[VALUE], path)
      } else if (value[IS_PROXY]) {
        return value
      } else if (isPlainObject(value)) {
        return this.createObjectProxy(value, path)
      } else if (Array.isArray(value)) {
        return this.createArrayProxy(value, path)
      }
    }

    return value
  }
}
