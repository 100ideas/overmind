import { EventEmitter } from 'betsy'
import { proxifyEffects } from './utils'
import { ActionChainEvents, Execution } from './types'

const IS_DEVELOPMENT = process.env.NODE_ENV !== 'production'

export class ActionChain<Effects, ExtraEvents = {}> extends EventEmitter<
  ActionChainEvents & ExtraEvents
> {
  constructor(
    private effects: Effects,
    private options: { providerExceptions?: string[] } = {}
  ) {
    super()
  }

  getEffects(thisExecution: Execution) {
    if (IS_DEVELOPMENT) {
      return proxifyEffects(
        this.effects,
        this.options.providerExceptions,
        (effect) =>
          this.emitAsync('effect', { ...thisExecution, ...effect } as any)
      )
    }

    return this.effects
  }
}
